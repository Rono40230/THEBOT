"""
Module Calendrier des Annonces √âconomiques
==========================================

Ce module fou                                    dcc.Dropdown(
                                        id="calendar-impact-filter",
                                        options=[
                                            {'label': 'üî¥ Critique', 'value': 'critical'},
                                            {'label': 'üü† √âlev√©', 'value': 'high'},
                                            {'label': 'üü° Moyen', 'value': 'medium'},
                                            {'label': '‚ö™ Faible', 'value': 'low'}
                                        ],
                                        value=['critical', 'high'],
                                        multi=True,
                                        placeholder="S√©lectionner l'impact...",
                                        style={'zIndex': 99999, 'position': 'relative'},
                                        className="calendar-dropdown-fix"
                                    )ndrier interactif des annonces √©conomiques
avec possibilit√© de s√©lectionner et suivre les √©v√©nements importants.

Fonctionnalit√©s:
- Calendrier mensuel avec √©v√©nements √©conomiques
- S√©lection d'√©v√©nements √† suivre
- Filtrage par pays, cat√©gorie et impact
- Vues multiples : calendrier, liste, analytics
- Statistiques et analyses des √©v√©nements

"""

from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import json
import calendar

import dash
from dash import html, dcc, callback, Input, Output, State, ALL
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
import pandas as pd

from ..data_providers import economic_events_provider
from ..data_providers import economic_events_config
from ..core.economic_calendar_rss_parser import economic_calendar_parser
# Import de la nouvelle API Finnhub
from ..data_providers.finnhub_economic_calendar import finnhub_calendar


class AnnouncementsCalendarModule:
    """Module de calendrier des annonces √©conomiques"""
    
    def __init__(self, calculators=None):
        self.name = "Calendrier Annonces"
        self.id = "announcements-calendar"
        self.calculators = calculators or {}
        
        # Configuration des widgets (version simplifi√©e)
        print(f"üìÖ {self.name} initialis√©")
        
        # Configuration simplifi√©e - TOUS LES √âV√âNEMENTS par d√©faut
        self.default_countries = None  # TOUS les pays
        self.default_categories = None  # TOUTES les cat√©gories
        self.default_impacts = ['critical', 'high', 'moderate']  # Tous les impacts sauf faible
        
        # √âtat actuel du calendrier
        self.current_date = datetime.now()
        self.current_view = 'calendar'  # 'calendar', 'list', 'analytics'
        self.current_impact_filter = 'all'  # 'all', 'critical', 'high', 'moderate'
        
        # Cache pour les √©v√©nements
        self.events_cache = {}
        self.last_update = None
        
        # Param√®tres fixes
        self.filter_period = 90
        self.realtime_sync = True
        
    def _get_initial_calendar_content(self):
        """G√©n√©rer le contenu initial du calendrier au d√©marrage - TOUS LES √âV√âNEMENTS"""
        try:
            # R√©cup√©rer TOUS les √©v√©nements sans filtrage
            events = self.get_real_economic_events(
                days_ahead=self.filter_period,
                countries=None,  # TOUS les pays
                impacts=None     # TOUS les impacts
            )
            
            # Si pas d'√©v√©nements API, utiliser fallback
            if not events:
                events = self._get_fallback_events()
                
            # Pas de filtrage par cat√©gories - TOUS LES √âV√âNEMENTS
            return self.generate_calendar_view(events)
            
        except Exception as e:
            # En cas d'erreur, afficher un message informatif
            return html.Div([
                dbc.Alert([
                    html.H5("‚è≥ Chargement du calendrier..."),
                    html.P("Le calendrier √©conomique charge tous les √©v√©nements disponibles.")
                ], color="info", className="text-center mt-4")
            ])
        
    def get_layout(self) -> html.Div:
        """Retourner le layout principal du module"""
        
        return html.Div([
            # Contr√¥les de vue ET bouton tri impact sur la m√™me ligne
            dbc.Row([
                dbc.Col([
                    dbc.ButtonGroup([
                        dbc.Button("üìÖ Calendrier", id="btn-view-calendar", 
                                 color="primary", size="sm", active=True),
                        dbc.Button("üìã Liste", id="btn-view-list", 
                                 color="outline-primary", size="sm"),
                        dbc.Button("üìä Analytics", id="btn-view-analytics", 
                                 color="outline-primary", size="sm")
                    ])
                ], width=6),
                dbc.Col([
                    dbc.ButtonGroup([
                        dbc.Button("ÔøΩ Critique", id="btn-impact-critical", 
                                 color="danger", size="sm", outline=True),
                        dbc.Button("üü† √âlev√©", id="btn-impact-high", 
                                 color="warning", size="sm", outline=True),
                        dbc.Button("üü° Mod√©r√©", id="btn-impact-moderate", 
                                 color="info", size="sm", outline=True),
                        dbc.Button("üìä Tous", id="btn-impact-all", 
                                 color="success", size="sm", active=True)
                    ], className="w-100")
                ], width=6)
            ], className="mb-3", style={'alignItems': 'center'}),
            
            # Navigation du calendrier (pour vue calendrier)
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardHeader([
                            dbc.Row([
                                dbc.Col([
                                    dbc.Button("‚óÄ", id="calendar-prev-month", color="outline-primary", size="sm"),
                                ], width=2),
                                dbc.Col([
                                    html.H5(id="calendar-current-month", className="text-center mb-0")
                                ], width=8),
                                dbc.Col([
                                    dbc.Button("‚ñ∂", id="calendar-next-month", color="outline-primary", size="sm"),
                                ], width=2)
                            ])
                        ]),
                        dbc.CardBody([
                            # Contenu du calendrier selon la vue - Charg√© automatiquement au d√©marrage
                            html.Div(
                                id="calendar-content",
                                children=self._get_initial_calendar_content()
                            )
                        ])
                    ])
                ], width=12)
            ], className="mt-3"),
            
            # Modal pour afficher les d√©tails d'un √©v√©nement
            dbc.Modal([
                dbc.ModalHeader(dbc.ModalTitle(id="event-detail-title")),
                dbc.ModalBody([
                    html.Div(id="event-detail-content")
                ]),
                dbc.ModalFooter([
                    dbc.Button("Fermer", id="close-event-detail", className="ms-auto", n_clicks=0)
                ])
            ], id="event-detail-modal", is_open=False, size="lg"),
            
        ], className="calendar-module")
    
    def get_real_economic_events(self, days_ahead: int = 7, countries: List[str] = None, impacts: List[str] = None) -> List[Dict]:
        """R√©cup√®re les vrais √©v√©nements √©conomiques via API Finnhub"""
        
        try:
            # Utiliser le cache si r√©cent (5 minutes)
            cache_key = f"{days_ahead}_{'-'.join(countries or [])}_{'-'.join(impacts or [])}"
            
            if (self.last_update and 
                cache_key in self.events_cache and 
                (datetime.now() - self.last_update).seconds < 300):
                return self.events_cache[cache_key]
            
            # PRIORIT√â 1: Essayer l'API Finnhub d'abord
            print(f"üèõÔ∏è Tentative API Finnhub: {days_ahead} jours, pays={countries}, impacts={impacts}")
            
            events = finnhub_calendar.get_economic_events(
                days_ahead=days_ahead,
                countries=countries,
                impacts=impacts,
                max_events=100  # Plus d'√©v√©nements pour un meilleur r√©sultat
            )
            
            print(f"‚úÖ Finnhub: {len(events)} √©v√©nements r√©cup√©r√©s")
            
            # FALLBACK: Si Finnhub √©choue ou retourne peu d'√©v√©nements, utiliser RSS
            if len(events) < 5:
                print(f"üîÑ Fallback RSS car Finnhub a retourn√© {len(events)} √©v√©nements")
                
                rss_events = economic_calendar_parser.get_economic_events(
                    days_ahead=days_ahead,
                    max_events=50
                )
                
                # Filtrage RSS
                if countries and 'ALL' not in countries:
                    rss_events = [e for e in rss_events if e.get('country') in countries]
                
                if impacts:
                    rss_events = [e for e in rss_events if e.get('impact') in impacts]
                
                print(f"‚úÖ RSS Fallback: {len(rss_events)} √©v√©nements apr√®s filtrage")
                
                # Combiner Finnhub + RSS pour plus de donn√©es
                events.extend(rss_events)
                
                # D√©duplication par titre
                seen_titles = set()
                unique_events = []
                for event in events:
                    title = event.get('title', '').lower()
                    if title not in seen_titles:
                        seen_titles.add(title)
                        unique_events.append(event)
                
                events = unique_events[:100]  # Limiter √† 100
                print(f"üìä Total apr√®s d√©duplication: {len(events)} √©v√©nements")
            
            # Mise en cache
            self.events_cache[cache_key] = events
            self.last_update = datetime.now()
            
            return events
            
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration √©v√©nements: {e}")
            return self._get_fallback_events()
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration √©v√©nements √©conomiques: {e}")
            # Retourner quelques √©v√©nements de fallback
            return self._get_fallback_events()
    
    def _get_fallback_events(self) -> List[Dict]:
        """√âv√©nements de secours en cas d'√©chec RSS - Version √©tendue avec 100+ √©v√©nements"""
        
        today = datetime.now()
        events = []
        
        # üá∫üá∏ √âTATS-UNIS - √âv√©nements critiques et importants
        events.extend([
            {
                'id': 'fallback_us_1',
                'title': 'US Non-Farm Payrolls (NFP)',
                'description': 'Cr√©ation d\'emplois aux √âtats-Unis - Indicateur cl√© du march√© du travail',
                'country': 'US',
                'impact': 'critical',
                'event_date': today + timedelta(days=1),
                'event_time': '14:30',
                'category': 'employment',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_2',
                'title': 'US Consumer Price Index (CPI)',
                'description': 'Indice des prix √† la consommation am√©ricain',
                'country': 'US',
                'impact': 'critical',
                'event_date': today + timedelta(days=3),
                'event_time': '14:30',
                'category': 'inflation',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_3',
                'title': 'Federal Reserve Interest Rate Decision',
                'description': 'D√©cision de taux de la Fed - Impact majeur sur les march√©s',
                'country': 'US',
                'impact': 'critical',
                'event_date': today + timedelta(days=5),
                'event_time': '20:00',
                'category': 'monetary_policy',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_4',
                'title': 'US GDP Quarterly Growth',
                'description': 'Croissance trimestrielle du PIB am√©ricain',
                'country': 'US',
                'impact': 'critical',
                'event_date': today + timedelta(days=7),
                'event_time': '14:30',
                'category': 'gdp_growth',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_5',
                'title': 'US Retail Sales',
                'description': 'Ventes au d√©tail am√©ricaines - Consommation',
                'country': 'US',
                'impact': 'high',
                'event_date': today + timedelta(days=9),
                'event_time': '14:30',
                'category': 'retail',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_6',
                'title': 'US Manufacturing PMI',
                'description': 'Indice PMI manufacturier am√©ricain',
                'country': 'US',
                'impact': 'high',
                'event_date': today + timedelta(days=11),
                'event_time': '15:45',
                'category': 'industrial',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_us_7',
                'title': 'US Trade Balance',
                'description': 'Balance commerciale des √âtats-Unis',
                'country': 'US',
                'impact': 'medium',
                'event_date': today + timedelta(days=13),
                'event_time': '14:30',
                'category': 'trade',
                'currency': 'USD',
                'source': 'Fallback Data'
            },
        ])
        
        # üá™üá∫ ZONE EURO - √âv√©nements BCE et √©conomiques
        events.extend([
            {
                'id': 'fallback_eu_1',
                'title': 'ECB Interest Rate Decision',
                'description': 'D√©cision de taux de la Banque Centrale Europ√©enne',
                'country': 'EU',
                'impact': 'critical',
                'event_date': today + timedelta(days=2),
                'event_time': '14:15',
                'category': 'monetary_policy',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_eu_2',
                'title': 'Eurozone CPI Flash Estimate',
                'description': 'Estimation flash de l\'inflation en Zone Euro',
                'country': 'EU',
                'impact': 'critical',
                'event_date': today + timedelta(days=4),
                'event_time': '11:00',
                'category': 'inflation',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_eu_3',
                'title': 'Eurozone GDP Growth',
                'description': 'Croissance du PIB de la Zone Euro',
                'country': 'EU',
                'impact': 'high',
                'event_date': today + timedelta(days=6),
                'event_time': '11:00',
                'category': 'gdp_growth',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_eu_4',
                'title': 'Eurozone Manufacturing PMI',
                'description': 'PMI manufacturier de la Zone Euro',
                'country': 'EU',
                'impact': 'high',
                'event_date': today + timedelta(days=8),
                'event_time': '10:00',
                'category': 'industrial',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_eu_5',
                'title': 'EU Employment Data',
                'description': 'Donn√©es sur l\'emploi en Zone Euro',
                'country': 'EU',
                'impact': 'high',
                'event_date': today + timedelta(days=10),
                'event_time': '11:00',
                'category': 'employment',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
        ])
        
        # üá¨üáß ROYAUME-UNI - √âv√©nements BoE et √©conomiques
        events.extend([
            {
                'id': 'fallback_uk_1',
                'title': 'Bank of England Rate Decision',
                'description': 'D√©cision de taux de la Banque d\'Angleterre',
                'country': 'UK',
                'impact': 'critical',
                'event_date': today + timedelta(days=1),
                'event_time': '12:00',
                'category': 'monetary_policy',
                'currency': 'GBP',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_uk_2',
                'title': 'UK CPI Inflation',
                'description': 'Inflation des prix √† la consommation UK',
                'country': 'UK',
                'impact': 'critical',
                'event_date': today + timedelta(days=3),
                'event_time': '09:30',
                'category': 'inflation',
                'currency': 'GBP',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_uk_3',
                'title': 'UK Employment Data',
                'description': 'Donn√©es sur l\'emploi au Royaume-Uni',
                'country': 'UK',
                'impact': 'high',
                'event_date': today + timedelta(days=5),
                'event_time': '09:30',
                'category': 'employment',
                'currency': 'GBP',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_uk_4',
                'title': 'UK GDP Growth',
                'description': 'Croissance du PIB britannique',
                'country': 'UK',
                'impact': 'high',
                'event_date': today + timedelta(days=7),
                'event_time': '09:30',
                'category': 'gdp_growth',
                'currency': 'GBP',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_uk_5',
                'title': 'UK Retail Sales',
                'description': 'Ventes au d√©tail britanniques',
                'country': 'UK',
                'impact': 'medium',
                'event_date': today + timedelta(days=9),
                'event_time': '09:30',
                'category': 'retail',
                'currency': 'GBP',
                'source': 'Fallback Data'
            },
        ])
        
        # üáØüáµ JAPON - √âv√©nements BoJ et √©conomiques
        events.extend([
            {
                'id': 'fallback_jp_1',
                'title': 'Bank of Japan Rate Decision',
                'description': 'D√©cision de taux de la Banque du Japon',
                'country': 'JP',
                'impact': 'critical',
                'event_date': today + timedelta(days=2),
                'event_time': '04:00',
                'category': 'monetary_policy',
                'currency': 'JPY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_jp_2',
                'title': 'Japan CPI Inflation',
                'description': 'Inflation des prix √† la consommation japonaise',
                'country': 'JP',
                'impact': 'high',
                'event_date': today + timedelta(days=4),
                'event_time': '01:30',
                'category': 'inflation',
                'currency': 'JPY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_jp_3',
                'title': 'Japan GDP Quarterly',
                'description': 'PIB trimestriel du Japon',
                'country': 'JP',
                'impact': 'high',
                'event_date': today + timedelta(days=6),
                'event_time': '01:50',
                'category': 'gdp_growth',
                'currency': 'JPY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_jp_4',
                'title': 'Japan Manufacturing PMI',
                'description': 'PMI manufacturier japonais',
                'country': 'JP',
                'impact': 'medium',
                'event_date': today + timedelta(days=8),
                'event_time': '02:30',
                'category': 'industrial',
                'currency': 'JPY',
                'source': 'Fallback Data'
            },
        ])
        
        # üá®üá¶ CANADA - √âv√©nements BoC et √©conomiques
        events.extend([
            {
                'id': 'fallback_ca_1',
                'title': 'Bank of Canada Rate Decision',
                'description': 'D√©cision de taux de la Banque du Canada',
                'country': 'CA',
                'impact': 'critical',
                'event_date': today + timedelta(days=1),
                'event_time': '16:00',
                'category': 'monetary_policy',
                'currency': 'CAD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_ca_2',
                'title': 'Canada CPI Inflation',
                'description': 'Inflation canadienne',
                'country': 'CA',
                'impact': 'high',
                'event_date': today + timedelta(days=3),
                'event_time': '14:30',
                'category': 'inflation',
                'currency': 'CAD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_ca_3',
                'title': 'Canada Employment Data',
                'description': 'Donn√©es sur l\'emploi canadien',
                'country': 'CA',
                'impact': 'high',
                'event_date': today + timedelta(days=5),
                'event_time': '14:30',
                'category': 'employment',
                'currency': 'CAD',
                'source': 'Fallback Data'
            },
        ])
        
        # üá¶üá∫ AUSTRALIE - √âv√©nements RBA et √©conomiques
        events.extend([
            {
                'id': 'fallback_au_1',
                'title': 'Reserve Bank of Australia Rate Decision',
                'description': 'D√©cision de taux de la RBA',
                'country': 'AU',
                'impact': 'critical',
                'event_date': today + timedelta(days=2),
                'event_time': '05:30',
                'category': 'monetary_policy',
                'currency': 'AUD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_au_2',
                'title': 'Australia CPI Inflation',
                'description': 'Inflation australienne',
                'country': 'AU',
                'impact': 'high',
                'event_date': today + timedelta(days=4),
                'event_time': '02:30',
                'category': 'inflation',
                'currency': 'AUD',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_au_3',
                'title': 'Australia Employment Data',
                'description': 'Donn√©es sur l\'emploi australien',
                'country': 'AU',
                'impact': 'high',
                'event_date': today + timedelta(days=6),
                'event_time': '02:30',
                'category': 'employment',
                'currency': 'AUD',
                'source': 'Fallback Data'
            },
        ])
        
        # üá®üá≠ SUISSE - √âv√©nements SNB et √©conomiques
        events.extend([
            {
                'id': 'fallback_ch_1',
                'title': 'Swiss National Bank Rate Decision',
                'description': 'D√©cision de taux de la Banque Nationale Suisse',
                'country': 'CH',
                'impact': 'critical',
                'event_date': today + timedelta(days=3),
                'event_time': '09:30',
                'category': 'monetary_policy',
                'currency': 'CHF',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_ch_2',
                'title': 'Switzerland CPI',
                'description': 'Inflation suisse',
                'country': 'CH',
                'impact': 'medium',
                'event_date': today + timedelta(days=5),
                'event_time': '08:30',
                'category': 'inflation',
                'currency': 'CHF',
                'source': 'Fallback Data'
            },
        ])
        
        # üá®üá≥ CHINE - √âv√©nements √©conomiques majeurs
        events.extend([
            {
                'id': 'fallback_cn_1',
                'title': 'China GDP Growth',
                'description': 'Croissance du PIB chinois',
                'country': 'CN',
                'impact': 'critical',
                'event_date': today + timedelta(days=2),
                'event_time': '04:00',
                'category': 'gdp_growth',
                'currency': 'CNY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_cn_2',
                'title': 'China Manufacturing PMI',
                'description': 'PMI manufacturier chinois',
                'country': 'CN',
                'impact': 'high',
                'event_date': today + timedelta(days=4),
                'event_time': '03:00',
                'category': 'industrial',
                'currency': 'CNY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_cn_3',
                'title': 'China CPI Inflation',
                'description': 'Inflation chinoise',
                'country': 'CN',
                'impact': 'high',
                'event_date': today + timedelta(days=6),
                'event_time': '03:30',
                'category': 'inflation',
                'currency': 'CNY',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_cn_4',
                'title': 'China Trade Balance',
                'description': 'Balance commerciale chinoise',
                'country': 'CN',
                'impact': 'high',
                'event_date': today + timedelta(days=8),
                'event_time': '04:00',
                'category': 'trade',
                'currency': 'CNY',
                'source': 'Fallback Data'
            },
        ])
        
        # üá©üá™ ALLEMAGNE - √âv√©nements √©conomiques
        events.extend([
            {
                'id': 'fallback_de_1',
                'title': 'Germany GDP Growth',
                'description': 'Croissance du PIB allemand',
                'country': 'DE',
                'impact': 'high',
                'event_date': today + timedelta(days=1),
                'event_time': '08:00',
                'category': 'gdp_growth',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_de_2',
                'title': 'Germany CPI Inflation',
                'description': 'Inflation allemande',
                'country': 'DE',
                'impact': 'high',
                'event_date': today + timedelta(days=3),
                'event_time': '08:00',
                'category': 'inflation',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_de_3',
                'title': 'Germany Manufacturing PMI',
                'description': 'PMI manufacturier allemand',
                'country': 'DE',
                'impact': 'medium',
                'event_date': today + timedelta(days=5),
                'event_time': '09:30',
                'category': 'industrial',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
        ])
        
        # üá´üá∑ FRANCE - √âv√©nements √©conomiques
        events.extend([
            {
                'id': 'fallback_fr_1',
                'title': 'France GDP Growth',
                'description': 'Croissance du PIB fran√ßais',
                'country': 'FR',
                'impact': 'high',
                'event_date': today + timedelta(days=2),
                'event_time': '08:45',
                'category': 'gdp_growth',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_fr_2',
                'title': 'France CPI Inflation',
                'description': 'Inflation fran√ßaise',
                'country': 'FR',
                'impact': 'medium',
                'event_date': today + timedelta(days=4),
                'event_time': '08:45',
                'category': 'inflation',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
        ])
        
        # üáÆüáπ ITALIE - √âv√©nements √©conomiques
        events.extend([
            {
                'id': 'fallback_it_1',
                'title': 'Italy GDP Growth',
                'description': 'Croissance du PIB italien',
                'country': 'IT',
                'impact': 'medium',
                'event_date': today + timedelta(days=3),
                'event_time': '10:00',
                'category': 'gdp_growth',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
            {
                'id': 'fallback_it_2',
                'title': 'Italy CPI Inflation',
                'description': 'Inflation italienne',
                'country': 'IT',
                'impact': 'medium',
                'event_date': today + timedelta(days=5),
                'event_time': '10:00',
                'category': 'inflation',
                'currency': 'EUR',
                'source': 'Fallback Data'
            },
        ])
        
        # √âV√âNEMENTS SUPPL√âMENTAIRES - Tous secteurs sur 90 jours
        additional_events = []
        
        for day_offset in range(10, 90, 3):  # √âv√©nements tous les 3 jours sur 90 jours
            event_templates = [
                {
                    'title': 'Global Energy Market Report',
                    'country': 'GLOBAL',
                    'category': 'energy',
                    'impact': 'medium'
                },
                {
                    'title': 'Crypto Market Analysis',
                    'country': 'GLOBAL',
                    'category': 'crypto',
                    'impact': 'high'
                },
                {
                    'title': 'Technology Sector PMI',
                    'country': 'US',
                    'category': 'technology',
                    'impact': 'medium'
                },
                {
                    'title': 'Healthcare Industry Index',
                    'country': 'EU',
                    'category': 'healthcare',
                    'impact': 'low'
                },
                {
                    'title': 'Financial Services PMI',
                    'country': 'UK',
                    'category': 'financial',
                    'impact': 'medium'
                },
                {
                    'title': 'Real Estate Market Index',
                    'country': 'CA',
                    'category': 'real_estate',
                    'impact': 'medium'
                },
                {
                    'title': 'Agricultural Price Index',
                    'country': 'AU',
                    'category': 'agriculture',
                    'impact': 'low'
                },
                {
                    'title': 'Environmental Policy Update',
                    'country': 'EU',
                    'category': 'environment',
                    'impact': 'low'
                }
            ]
            
            template = event_templates[day_offset % len(event_templates)]
            additional_events.append({
                'id': f'fallback_additional_{day_offset}',
                'title': template['title'],
                'description': f'√âv√©nement {template["category"]} important',
                'country': template['country'],
                'impact': template['impact'],
                'event_date': today + timedelta(days=day_offset),
                'event_time': f'{9 + (day_offset % 12):02d}:00',
                'category': template['category'],
                'currency': 'USD' if template['country'] == 'US' else 'EUR',
                'source': 'Fallback Data Extended'
            })
        
        events.extend(additional_events)
        
        return events
    
    def _filter_by_categories(self, events: List[Dict], categories: List[str]) -> List[Dict]:
        """Filtre les √©v√©nements par cat√©gories s√©lectionn√©es avec correspondance flexible"""
        if not categories:
            return events
        
        # Mapping des cat√©gories pour une correspondance flexible
        category_mapping = {
            'monetary_policy': ['monetary_policy', 'central_bank', 'interest_rates'],
            'inflation': ['inflation', 'cpi', 'ppi', 'prices'],
            'employment': ['employment', 'jobs', 'unemployment', 'labor'],
            'gdp_growth': ['gdp_growth', 'gdp', 'growth', 'economic_growth'],
            'industrial': ['industrial', 'manufacturing', 'factory', 'production'],
            'retail': ['retail', 'sales', 'consumer', 'consumption'],
            'trade': ['trade', 'exports', 'imports', 'balance'],
            'technology': ['technology', 'tech', 'innovation'],
            'healthcare': ['healthcare', 'health', 'medical'],
            'financial': ['financial', 'banking', 'finance'],
            'energy': ['energy', 'oil', 'gas', 'electricity'],
            'crypto': ['crypto', 'cryptocurrency', 'bitcoin'],
            'agriculture': ['agriculture', 'farming', 'food'],
            'real_estate': ['real_estate', 'housing', 'property'],
            'environment': ['environment', 'climate', 'green']
        }
        
        # Debug: afficher les cat√©gories demand√©es
        print(f"üîç Filtrage par cat√©gories: {categories}")
        print(f"üìä √âv√©nements avant filtrage: {len(events)}")
        
        # Cr√©er une liste √©tendue de cat√©gories accept√©es
        extended_categories = set(categories)
        for cat in categories:
            if cat in category_mapping:
                extended_categories.update(category_mapping[cat])
        
        print(f"üîç Cat√©gories √©tendues accept√©es: {sorted(extended_categories)}")
        
        filtered_events = []
        for event in events:
            event_category = event.get('category', '').lower()
            
            # V√©rification de correspondance directe ou √©tendue
            category_match = (
                event_category in categories or 
                event_category in extended_categories or
                any(cat.lower() in event_category for cat in categories)
            )
            
            if category_match:
                filtered_events.append(event)
                print(f"‚úÖ √âv√©nement gard√©: {event['title']} (cat√©gorie: {event_category})")
            else:
                print(f"‚ùå √âv√©nement filtr√©: {event['title']} (cat√©gorie: {event_category})")
        
        print(f"üìä √âv√©nements apr√®s filtrage: {len(filtered_events)}")
        return filtered_events
    
    def generate_calendar_view(self, events: List[Dict], target_date: datetime = None) -> html.Div:
        """G√©n√®re la vue calendrier mensuel avec √©v√©nements"""
        
        if not target_date:
            target_date = self.current_date
        
        # D√©but et fin du mois
        month_start = target_date.replace(day=1)
        if month_start.month == 12:
            month_end = month_start.replace(year=month_start.year + 1, month=1) - timedelta(days=1)
        else:
            month_end = month_start.replace(month=month_start.month + 1) - timedelta(days=1)
        
        # Cr√©er la grille du calendrier
        calendar_grid = []
        
        # En-t√™te des jours de la semaine
        weekdays = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
        header_row = dbc.Row([
            dbc.Col(html.Div(day, className="text-center fw-bold"), width=True) 
            for day in weekdays
        ], className="mb-2")
        calendar_grid.append(header_row)
        
        # Calculer le premier jour affich√© (peut √™tre du mois pr√©c√©dent)
        first_weekday = month_start.weekday()  # 0 = Lundi
        calendar_start = month_start - timedelta(days=first_weekday)
        
        # G√©n√©rer 6 semaines de calendrier
        current_date = calendar_start
        for week in range(6):
            week_row = []
            
            for day in range(7):
                day_events = []
                for e in events:
                    if e.get('event_date'):
                        # G√©rer les deux formats : datetime object ou string
                        event_date = e['event_date']
                        if isinstance(event_date, str):
                            try:
                                # Convertir string en datetime si n√©cessaire
                                event_date = datetime.strptime(event_date, '%Y-%m-%d')
                            except ValueError:
                                try:
                                    event_date = datetime.strptime(event_date[:10], '%Y-%m-%d')
                                except ValueError:
                                    continue
                        
                        # Comparer les dates
                        if event_date.date() == current_date.date():
                            day_events.append(e)
                
                # Style de la cellule selon le mois et les √©v√©nements
                cell_class = "calendar-day-cell border p-2 text-center"
                if current_date.month != target_date.month:
                    cell_class += " text-muted calendar-day-empty"
                elif day_events:
                    cell_class += " calendar-day-with-events"
                
                # Contenu de la cellule
                cell_content = [html.Strong(str(current_date.day))]
                
                # Ajouter les indicateurs d'√©v√©nements
                for event in day_events[:3]:  # Max 3 √©v√©nements affich√©s
                    impact_color = {
                        'critical': 'danger',
                        'high': 'warning', 
                        'medium': 'info',
                        'low': 'success'
                    }.get(event.get('impact', 'medium'), 'secondary')
                    
                    # Drapeaux plus grands pour meilleure visibilit√©
                    country_flags = {
                        'US': 'üá∫üá∏', 'EU': 'üá™üá∫', 'UK': 'üá¨üáß', 
                        'JP': 'üáØüáµ', 'CN': 'üá®üá≥', 'CA': 'üá®üá¶'
                    }
                    flag = country_flags.get(event.get('country', ''), 'üåç')
                    
                    event_badge = dbc.Badge([
                        html.Span(flag, style={'fontSize': '16px', 'marginRight': '3px'}),
                        html.Span(event.get('country', '??'), style={'fontSize': '10px'})
                    ],
                        color=impact_color,
                        className="me-1 event-indicator clickable-event",
                        style={'fontSize': '12px', 'cursor': 'pointer'},
                        id={'type': 'event-badge', 'index': event.get('id', f"event_{day_events.index(event)}")}
                    )
                    cell_content.append(html.Br())
                    cell_content.append(event_badge)
                
                # Si plus de 3 √©v√©nements
                if len(day_events) > 3:
                    cell_content.append(html.Br())
                    cell_content.append(
                        dbc.Badge(f"+{len(day_events)-3}", color="secondary", className="event-indicator")
                    )
                
                day_cell = dbc.Col(
                    html.Div(cell_content, className=cell_class),
                    width=True
                )
                week_row.append(day_cell)
                current_date += timedelta(days=1)
            
            calendar_grid.append(dbc.Row(week_row, className="mb-1"))
        
        return html.Div(calendar_grid)
    
    def generate_list_view(self, events: List[Dict]) -> html.Div:
        """G√©n√®re la vue liste des √©v√©nements"""
        
        if not events:
            return dbc.Alert("üìÖ Aucun √©v√©nement √©conomique trouv√© pour les crit√®res s√©lectionn√©s", color="info")
        
        # Grouper par date
        events_by_date = {}
        for event in events:
            event_date = event.get('event_date')
            if event_date:
                date_key = event_date.strftime('%Y-%m-%d')
                if date_key not in events_by_date:
                    events_by_date[date_key] = []
                events_by_date[date_key].append(event)
        
        # G√©n√©rer la liste
        list_items = []
        
        for date_key in sorted(events_by_date.keys()):
            date_obj = datetime.strptime(date_key, '%Y-%m-%d')
            day_events = events_by_date[date_key]
            
            # En-t√™te de la date
            date_header = html.H6(
                f"üìÖ {date_obj.strftime('%A %d %B %Y')}",
                className="text-primary mt-3 mb-2"
            )
            list_items.append(date_header)
            
            # √âv√©nements du jour
            for event in day_events:
                impact_colors = {
                    'critical': 'danger',
                    'high': 'warning',
                    'medium': 'info', 
                    'low': 'success'
                }
                
                impact_color = impact_colors.get(event.get('impact', 'medium'), 'secondary')
                
                country_flags = {
                    'US': 'üá∫üá∏', 'EU': 'üá™üá∫', 'UK': 'üá¨üáß', 
                    'JP': 'üáØüáµ', 'CN': 'üá®üá≥', 'CA': 'üá®üá¶'
                }
                
                flag = country_flags.get(event.get('country', ''), 'üåç')
                
                event_item = dbc.ListGroupItem([
                    dbc.Row([
                        dbc.Col([
                            html.Div([
                                dbc.Badge(event.get('event_time', 'TBD'), color="secondary", className="me-2"),
                                dbc.Badge(event.get('impact', 'medium').title(), color=impact_color, className="me-2"),
                                html.Span(f"{flag} {event.get('title', '√âv√©nement √©conomique')}", className="fw-bold")
                            ]),
                            html.Small(event.get('description', ''), className="text-muted")
                        ], width=10),
                        dbc.Col([
                            html.Small(event.get('currency', ''), className="text-muted")
                        ], width=2)
                    ])
                ], className=f"event-item-{event.get('impact', 'medium')}")
                
                list_items.append(event_item)
        
        return dbc.ListGroup(list_items)
    
    def generate_analytics_view(self, events: List[Dict]) -> html.Div:
        """G√©n√®re la vue analytics avec statistiques"""
        
        if not events:
            return dbc.Alert("üìä Aucune donn√©e disponible pour les analytics", color="warning")
        
        # Statistiques de base
        total_events = len(events)
        countries = list(set(e.get('country', 'Unknown') for e in events))
        impacts = list(set(e.get('impact', 'unknown') for e in events))
        
        # R√©partition par impact
        impact_counts = {}
        for event in events:
            impact = event.get('impact', 'unknown')
            impact_counts[impact] = impact_counts.get(impact, 0) + 1
        
        # R√©partition par pays
        country_counts = {}
        for event in events:
            country = event.get('country', 'Unknown')
            country_counts[country] = country_counts.get(country, 0) + 1
        
        return html.Div([
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4(str(total_events), className="text-primary"),
                            html.P("√âv√©nements total", className="mb-0")
                        ])
                    ])
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4(str(len(countries)), className="text-success"),
                            html.P("Pays concern√©s", className="mb-0")
                        ])
                    ])
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4(str(impact_counts.get('critical', 0)), className="text-danger"),
                            html.P("√âv√©nements critiques", className="mb-0")
                        ])
                    ])
                ], width=3),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H4(str(impact_counts.get('high', 0)), className="text-warning"),
                            html.P("Impact √©lev√©", className="mb-0")
                        ])
                    ])
                ], width=3)
            ], className="mb-4"),
            
            dbc.Row([
                dbc.Col([
                    html.H6("üìä R√©partition par Impact"),
                    dbc.ListGroup([
                        dbc.ListGroupItem(f"{impact.title()}: {count} √©v√©nements") 
                        for impact, count in impact_counts.items()
                    ])
                ], width=6),
                dbc.Col([
                    html.H6("üåç R√©partition par Pays"),
                    dbc.ListGroup([
                        dbc.ListGroupItem(f"{country}: {count} √©v√©nements") 
                        for country, count in country_counts.items()
                    ])
                ], width=6)
            ])
        ])
    
    def setup_callbacks(self, app):
        """Configurer les callbacks du module avec donn√©es r√©elles"""
        
        # Callback pour g√©rer uniquement les boutons de vue (sans conflits)
        @app.callback(
            [Output('btn-view-calendar', 'active'),
             Output('btn-view-list', 'active'), 
             Output('btn-view-analytics', 'active')],
            [Input('btn-view-calendar', 'n_clicks'),
             Input('btn-view-list', 'n_clicks'),
             Input('btn-view-analytics', 'n_clicks')],
            prevent_initial_call=False
        )
        def update_view_buttons(btn_cal, btn_list, btn_analytics):
            """Met √† jour les √©tats des boutons de vue seulement"""
            
            ctx = dash.callback_context
            
            # D√©terminer la vue active
            if ctx.triggered:
                trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
                
                if 'btn-view-list' in trigger_id:
                    self.current_view = 'list'
                    return False, True, False
                elif 'btn-view-analytics' in trigger_id:
                    self.current_view = 'analytics'
                    return False, False, True
                else:
                    self.current_view = 'calendar'
                    return True, False, False
            
            # Par d√©faut, vue calendrier active
            return True, False, False
        
        # Callback pour g√©rer les clics sur les √©v√©nements et afficher les d√©tails
        @app.callback(
            [Output('event-detail-modal', 'is_open'),
             Output('event-detail-title', 'children'),
             Output('event-detail-content', 'children')],
            [Input({'type': 'event-badge', 'index': ALL}, 'n_clicks'),
             Input('close-event-detail', 'n_clicks')],
            [State('event-detail-modal', 'is_open')],
            prevent_initial_call=True
        )
        def handle_event_click(badge_clicks, close_clicks, is_open):
            """G√®re les clics sur les √©v√©nements pour afficher les d√©tails"""
            
            ctx = dash.callback_context
            
            if not ctx.triggered:
                return False, "", ""
            
            trigger_id = ctx.triggered[0]['prop_id']
            
            # Si clic sur fermer
            if 'close-event-detail' in trigger_id:
                return False, "", ""
            
            # Si clic sur un badge d'√©v√©nement
            if 'event-badge' in trigger_id and any(badge_clicks):
                # Extraire l'ID de l'√©v√©nement cliqu√©
                import json
                trigger_data = json.loads(trigger_id.split('.')[0])
                event_id = trigger_data['index']
                
                # R√©cup√©rer les √©v√©nements pour trouver celui cliqu√©
                try:
                    events = self.get_real_economic_events(
                        days_ahead=30,
                        countries=self.active_countries, 
                        impacts=self.active_impacts
                    )
                    
                    if not events:
                        events = self._get_fallback_events()
                    
                    # Trouver l'√©v√©nement correspondant
                    clicked_event = None
                    for event in events:
                        if str(event.get('id', '')) == str(event_id):
                            clicked_event = event
                            break
                    
                    if clicked_event:
                        # Construire le contenu du modal
                        country_flags = {
                            'US': 'üá∫üá∏ √âtats-Unis', 'EU': 'üá™üá∫ Zone Euro', 'UK': 'üá¨üáß Royaume-Uni',
                            'JP': 'üáØüáµ Japon', 'CN': 'üá®üá≥ Chine', 'CA': 'üá®üá¶ Canada'
                        }
                        
                        impact_colors = {
                            'critical': 'danger', 'high': 'warning',
                            'medium': 'info', 'low': 'success'
                        }
                        
                        country_name = country_flags.get(clicked_event.get('country', ''), clicked_event.get('country', 'N/A'))
                        impact = clicked_event.get('impact', 'medium')
                        impact_color = impact_colors.get(impact, 'secondary')
                        
                        title = f"üìÖ {clicked_event.get('title', '√âv√©nement √âconomique')}"
                        
                        content = [
                            dbc.Row([
                                dbc.Col([
                                    html.H6("üåç Pays", className="text-muted"),
                                    html.P(country_name, className="fw-bold")
                                ], width=6),
                                dbc.Col([
                                    html.H6("üî• Impact", className="text-muted"),
                                    dbc.Badge(impact.title(), color=impact_color, className="fs-6")
                                ], width=6)
                            ], className="mb-3"),
                            
                            dbc.Row([
                                dbc.Col([
                                    html.H6("üìÖ Date & Heure", className="text-muted"),
                                    html.P([
                                        html.Strong(clicked_event.get('event_date', datetime.now()).strftime('%A %d %B %Y')),
                                        html.Br(),
                                        f"‚è∞ {clicked_event.get('event_time', 'TBD')}"
                                    ])
                                ], width=6),
                                dbc.Col([
                                    html.H6("üí± Devise", className="text-muted"),
                                    html.P(clicked_event.get('currency', 'N/A'), className="fw-bold")
                                ], width=6)
                            ], className="mb-3"),
                            
                            html.Hr(),
                            
                            html.H6("üìã Description", className="text-muted"),
                            html.P(clicked_event.get('description', 'Aucune description disponible'), 
                                  className="text-justify"),
                            
                            html.Hr(),
                            
                            dbc.Row([
                                dbc.Col([
                                    html.H6("üìÇ Cat√©gorie", className="text-muted"),
                                    html.P(clicked_event.get('category', 'N/A').title())
                                ], width=6),
                                dbc.Col([
                                    html.H6("üì° Source", className="text-muted"),
                                    html.P(clicked_event.get('source', 'Donn√©es √©conomiques'))
                                ], width=6)
                            ])
                        ]
                        
                        return True, title, content
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors du clic sur √©v√©nement: {e}")
                    return True, "‚ùå Erreur", [html.P("Impossible de charger les d√©tails de l'√©v√©nement")]
            
            return is_open, "", ""
        
        # Callbacks pour le modal de filtrage avanc√©
        @app.callback(
            Output('filter-modal', 'is_open'),
            [Input('btn-filter-events', 'n_clicks'),
             Input('cancel-filters', 'n_clicks'),
             Input('apply-filters', 'n_clicks')],
            [State('filter-modal', 'is_open')],
            prevent_initial_call=True
        )
        def toggle_filter_modal(open_clicks, cancel_clicks, apply_clicks, is_open):
            """G√®re l'ouverture/fermeture du modal de filtrage"""
            ctx = dash.callback_context
            
            if not ctx.triggered:
                return False
                
            trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
            
            if trigger_id == 'btn-filter-events':
                return not is_open
            elif trigger_id in ['cancel-filters', 'apply-filters']:
                return False
                
            return is_open
        
        @app.callback(
            [Output('modal-countries-checklist', 'value'),
             Output('modal-categories-checklist', 'value'),
             Output('modal-impact-checklist', 'value')],
            [Input('select-all-countries', 'n_clicks'),
             Input('deselect-all-countries', 'n_clicks'),
             Input('select-all-categories', 'n_clicks'),
             Input('deselect-all-categories', 'n_clicks'),
             Input('reset-filters', 'n_clicks')],
            [State('modal-countries-checklist', 'options'),
             State('modal-categories-checklist', 'options'),
             State('modal-impact-checklist', 'options')],
            prevent_initial_call=True
        )
        def handle_selection_buttons(select_countries, deselect_countries, 
                                   select_categories, deselect_categories, 
                                   reset_all, country_options, category_options, impact_options):
            """G√®re les boutons de s√©lection dans le modal"""
            ctx = dash.callback_context
            
            if not ctx.triggered:
                return dash.no_update, dash.no_update, dash.no_update
                
            trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
            
            # Valeurs par d√©faut - SYNCHRONIS√âES avec les nouvelles valeurs restrictives
            default_countries = self.default_countries.copy()  # ['US', 'EU', 'UK']
            default_categories = self.default_categories.copy()  # ['monetary_policy', 'inflation', 'employment']
            default_impacts = self.default_impacts.copy()  # ['critical', 'high']
            
            if trigger_id == 'select-all-countries':
                all_countries = [opt['value'] for opt in country_options]
                return all_countries, dash.no_update, dash.no_update
            elif trigger_id == 'deselect-all-countries':
                return [], dash.no_update, dash.no_update
            elif trigger_id == 'select-all-categories':
                all_categories = [opt['value'] for opt in category_options]
                return dash.no_update, all_categories, dash.no_update
            elif trigger_id == 'deselect-all-categories':
                return dash.no_update, [], dash.no_update
            elif trigger_id == 'reset-filters':
                return default_countries, default_categories, default_impacts
                
            return dash.no_update, dash.no_update, dash.no_update
        
        @app.callback(
            [Output('calendar-content', 'children'),
             Output('calendar-current-month', 'children')],
            [Input('apply-filters', 'n_clicks'),
             Input('btn-view-calendar', 'n_clicks'),
             Input('btn-view-list', 'n_clicks'),
             Input('btn-view-analytics', 'n_clicks'),
             Input('calendar-prev-month', 'n_clicks'),
             Input('calendar-next-month', 'n_clicks'),
             Input('modal-countries-checklist', 'value'),
             Input('modal-categories-checklist', 'value'),
             Input('modal-impact-checklist', 'value')],
            prevent_initial_call=True
        )
        def update_calendar_with_filters(apply_clicks, cal_clicks, list_clicks, analytics_clicks,
                                       prev_clicks, next_clicks, countries, categories, impacts):
            """Met √† jour le calendrier avec les filtres appliqu√©s et synchronisation temps r√©el"""
            ctx = dash.callback_context
            
            if not ctx.triggered:
                return dash.no_update, dash.no_update
                
            trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
            print(f"üîÑ Callback d√©clench√© par: {trigger_id}")
            print(f"üìä Filtres re√ßus - Pays: {countries}, Cat√©gories: {categories}, Impacts: {impacts}")
            
            # Gestion de la navigation temporelle
            if trigger_id == 'calendar-prev-month':
                self.current_date = self.current_date.replace(day=1)
                self.current_date = (self.current_date - timedelta(days=1)).replace(day=1)
            elif trigger_id == 'calendar-next-month':
                next_month = self.current_date.replace(day=28) + timedelta(days=4)
                self.current_date = next_month.replace(day=1)
            
            # Gestion des vues
            if trigger_id == 'btn-view-calendar':
                self.current_view = 'calendar'
            elif trigger_id == 'btn-view-list':
                self.current_view = 'list'
            elif trigger_id == 'btn-view-analytics':
                self.current_view = 'analytics'
            
            # Mise √† jour des filtres actifs - LOGIQUE CORRIG√âE
            # Si countries est None (pas encore initialis√©), utiliser d√©faut
            # Si countries est [] (liste vide = rien coch√©), utiliser liste vide
            self.active_countries = countries if countries is not None else self.default_countries.copy()
            self.active_categories = categories if categories is not None else self.default_categories.copy()
            self.active_impacts = impacts if impacts is not None else self.default_impacts.copy()
            
            # P√©riode et sync temps r√©el fixes (90 jours, temps r√©el activ√©)
            self.filter_period = 90
            self.realtime_sync = True
            
            print(f"‚úÖ Filtres appliqu√©s - Pays: {self.active_countries}, Cat√©gories: {self.active_categories}, Impacts: {self.active_impacts}")
            
            # NOUVELLE LOGIQUE : Si tous les filtres sont vides, afficher un message explicatif
            if (not self.active_countries or 
                not self.active_categories or 
                not self.active_impacts):
                
                print("‚ö†Ô∏è Filtres vides d√©tect√©s - Affichage du message d'aide")
                
                empty_message = html.Div([
                    dbc.Alert([
                        html.H4("üîç Aucun filtre s√©lectionn√©", className="alert-heading"),
                        html.P([
                            "Vous devez s√©lectionner au moins :",
                            html.Br(),
                            "‚Ä¢ Un pays d'int√©r√™t",
                            html.Br(), 
                            "‚Ä¢ Une cat√©gorie d'√©v√©nements",
                            html.Br(),
                            "‚Ä¢ Un niveau d'impact"
                        ]),
                        html.Hr(),
                        html.P([
                            "Utilisez le bouton ",
                            html.Strong("üîß Trier les √©v√©nements"), 
                            " ci-dessus pour configurer votre calendrier √©conomique."
                        ], className="mb-0")
                    ], color="info", className="text-center")
                ], className="mt-4")
                
                month_display = self.current_date.strftime("%B %Y").title()
                return empty_message, month_display
            
            # R√©cup√©ration des √©v√©nements avec nouveaux filtres
            events = self.get_real_economic_events(
                days_ahead=self.filter_period,
                countries=self.active_countries,
                impacts=self.active_impacts
            )
            
            # Si pas d'√©v√©nements, utiliser le fallback
            if not events:
                print("üîÑ Utilisation des √©v√©nements fallback")
                events = self._get_fallback_events()
            
            # Filtrage par cat√©gories (toujours actif maintenant)
            events = self._filter_by_categories(events, self.active_categories)
            
            # G√©n√©ration du contenu selon la vue
            month_display = self.current_date.strftime("%B %Y").title()
            
            if self.current_view == 'calendar':
                content = self.generate_calendar_view(events, self.current_date)
            elif self.current_view == 'list':
                content = self.generate_list_view(events)
            elif self.current_view == 'analytics':
                content = self.generate_analytics_view(events)
            else:
                content = self.generate_calendar_view(events, self.current_date)
            
            print(f"‚úÖ Contenu g√©n√©r√©: {len(events)} √©v√©nements, vue: {self.current_view}")
            return content, month_display
    
    def get_custom_css(self) -> str:
        """Retourner le CSS personnalis√© pour le module"""
        
        return """
        /* Styles pour le calendrier √©conomique */
        .calendar-grid {
            font-family: 'Inter', Arial, sans-serif;
        }
        
        /* Fix critique pour les dropdowns du calendrier */
        .calendar-dropdown-fix .Select__menu {
            z-index: 999999 !important;
            position: fixed !important;
        }
        
        .calendar-dropdown-fix .Select__menu-list {
            z-index: 999999 !important;
            position: relative !important;
        }
        
        .calendar-dropdown-fix .Select__control {
            border: 2px solid #dee2e6 !important;
            border-radius: 8px !important;
            transition: all 0.2s ease !important;
            z-index: 10 !important;
            position: relative !important;
        }
        
        .calendar-dropdown-fix .Select__control:hover {
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25) !important;
        }
        
        .calendar-dropdown-fix .Select__control--is-focused {
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.1rem rgba(0, 123, 255, 0.25) !important;
        }
        
        /* Styles pour les filtres - Toujours visibles et au-dessus */
        .calendar-module .card {
            position: relative;
            z-index: 10;
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .calendar-module .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        
        /* Dropdowns avec z-index √©lev√© - Solution universelle */
        .calendar-module .Select-menu-outer,
        .calendar-module .Select-menu,
        .calendar-module div[class*="menu"],
        .calendar-module .Select__menu,
        .calendar-module .Select__menu-list,
        .calendar-module div[data-dash-is-loading],
        .Select-menu-outer,
        .Select__menu,
        .Select__menu-list {
            z-index: 999999 !important;
            position: fixed !important;
        }
        
        /* Force ABSOLUE pour tous les dropdowns Dash */
        div[id*="calendar"] .Select__menu,
        div[id*="calendar"] .Select__menu-list,
        div[id*="calendar"] div[class*="menu"],
        div[class*="Select__menu"],
        div[class*="__menu"] {
            z-index: 999999 !important;
            position: fixed !important;
            background: white !important;
            border: 1px solid #ccc !important;
            border-radius: 4px !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
        }
        
        /* Container des filtres */
        .calendar-filters-container {
            position: sticky;
            top: 0;
            z-index: 100;
            background: white;
            padding: 15px 0;
            margin-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        /* Am√©lioration des cellules de calendrier */
        .calendar-day-cell {
            min-height: 100px;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #dee2e6 !important;
            background-color: #ffffff;
            position: relative;
            z-index: 1;
        }
        
        .calendar-day-cell:hover {
            background-color: #f8f9fa !important;
            border-color: #007bff !important;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .calendar-day-empty {
            background-color: #f8f9fa !important;
            color: #6c757d !important;
        }
        
        .calendar-day-with-events {
            background-color: #e3f2fd !important;
            border-color: #2196f3 !important;
        }
        
        /* √âv√©nements cliquables avec drapeaux plus grands */
        .event-indicator {
            font-size: 12px !important;
            font-weight: bold !important;
            padding: 4px 6px !important;
            margin: 2px !important;
            border-radius: 4px !important;
            transition: all 0.2s ease !important;
        }
        
        .clickable-event {
            cursor: pointer !important;
            transform: scale(1) !important;
            transition: all 0.2s ease !important;
        }
        
        .clickable-event:hover {
            transform: scale(1.1) !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2) !important;
            z-index: 10 !important;
        }
        
        /* Styles pour les filtres */
        .events-filter-section {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            color: white;
        }
        
        /* Styles pour les √©v√©nements par impact */
        .event-item-critical {
            border-left: 4px solid #dc3545 !important;
            background-color: #f8d7da !important;
        }
        
        .event-item-high {
            border-left: 4px solid #fd7e14 !important;
            background-color: #fff3cd !important;
        }
        
        .event-item-medium {
            border-left: 4px solid #0dcaf0 !important;
            background-color: #cff4fc !important;
        }
        
        .event-item-low {
            border-left: 4px solid #198754 !important;
            background-color: #d1e7dd !important;
        }
        
        /* Navigation du calendrier */
        .calendar-navigation {
            background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 15px;
        }
        
        /* Badges d'impact */
        .badge-critical {
            background: linear-gradient(45deg, #ff4757, #ff3742) !important;
        }
        
        .badge-high {
            background: linear-gradient(45deg, #ffa502, #ff9f43) !important;
        }
        
        .badge-medium {
            background: linear-gradient(45deg, #3742fa, #2f3542) !important;
        }
        
        .badge-low {
            background: linear-gradient(45deg, #2ed573, #1dd1a1) !important;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .calendar-day-cell {
                min-height: 60px;
                font-size: 12px;
            }
            
            .event-indicator {
                font-size: 10px !important;
            }
        }
        
        /* Dark mode support */
        [data-bs-theme="dark"] .calendar-day-cell {
            background-color: #2d3748;
            border-color: #4a5568;
            color: #e2e8f0;
        }
        
        [data-bs-theme="dark"] .calendar-day-cell:hover {
            background-color: #4a5568 !important;
            border-color: #63b3ed !important;
        }
        """