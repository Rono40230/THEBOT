from src.thebot.core.logger import logger
#!/usr/bin/env python3
"""
Script de validation de la configuration THEBOT
V√©rifie que tous les secrets et param√®tres requis sont configur√©s
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire racine au path pour importer les modules
sys.path.insert(0, str(Path(__file__).parent))

from dash_modules.core.secrets_manager import secrets_manager
from dash_modules.core.error_handler import ErrorSeverity


def validate_configuration():
    """Valide la configuration compl√®te"""
    logger.info("üîç Validation de la configuration THEBOT...")
    logger.info("=" * 50)
    
    # Utiliser le gestionnaire de secrets pour valider
    report = secrets_manager.validate_configuration()
    
    # Afficher les r√©sultats
    if report['valid']:
        logger.info("‚úÖ Configuration valide")
    else:
        logger.info("‚ùå Configuration invalide")
        logger.info("\nSecrets requis manquants:")
        for secret in report['missing_required']:
            logger.info(f"  - {secret}")
    
    if report['warnings']:
        logger.info("\n‚ö†Ô∏è  Avertissements:")
        for warning in report['warnings']:
            logger.info(f"  - {warning}")
    
    if report['recommendations']:
        logger.info("\nüí° Recommandations:")
        for rec in report['recommendations']:
            logger.info(f"  - {rec}")
    
    # Afficher les secrets configur√©s (masqu√©s)
    logger.info("\nüîê Secrets configur√©s:")
    secrets_info = secrets_manager.get_all_secrets_info()
    if secrets_info:
        for key, masked_value in secrets_info.items():
            logger.info(f"  - {key}: {masked_value}")
    else:
        logger.info("  Aucun secret configur√©")
    
    logger.info("\n" + "=" * 50)
    
    # V√©rifier la pr√©sence du fichier .env
    env_file = Path('.env')
    if env_file.exists():
        logger.info("‚úÖ Fichier .env trouv√©")
    else:
        logger.info("‚ö†Ô∏è  Fichier .env non trouv√© (utilise les variables d'environnement syst√®me)")
    
    return report['valid']


def check_database_connection():
    """V√©rifie la connexion √† la base de donn√©es"""
    logger.info("\nüîå Test de connexion √† la base de donn√©es...")
    
    try:
        db_config = secrets_manager.get_database_config()
        logger.info(f"URL: {secrets_manager.mask_secret(db_config['url'])}")
        
        # Ici on pourrait ajouter un vrai test de connexion
        # Pour l'instant, on v√©rifie juste que l'URL est d√©finie
        if db_config['url']:
            logger.info("‚úÖ Configuration base de donn√©es OK")
            return True
        else:
            logger.info("‚ùå URL de base de donn√©es manquante")
            return False
            
    except Exception as e:
        logger.info(f"‚ùå Erreur base de donn√©es: {e}")
        return False


def check_api_keys():
    """V√©rifie les cl√©s API disponibles"""
    logger.info("\nüîë V√©rification des cl√©s API...")
    
    providers = ['binance', 'coingecko', 'twelve_data', 'alpha_vantage', 'finnhub', 'fmp']
    available_providers = []
    
    for provider in providers:
        keys = secrets_manager.get_api_keys(provider)
        if keys:
            available_providers.append(provider)
            logger.info(f"‚úÖ {provider}: {len(keys)} cl√©(s) configur√©e(s)")
        else:
            logger.info(f"‚ùå {provider}: aucune cl√© configur√©e")
    
    if available_providers:
        logger.info(f"\nüìä {len(available_providers)}/{len(providers)} providers API disponibles")
    else:
        logger.info("\n‚ö†Ô∏è  Aucune cl√© API configur√©e - fonctionnalit√©s limit√©es")
    
    return len(available_providers) > 0


def main():
    """Fonction principale"""
    logger.info("üöÄ Validation de configuration THEBOT Phase 3")
    logger.info("Phase 3: Qualit√© et S√©curit√©")
    logger.info()
    
    # Validation g√©n√©rale
    config_valid = validate_configuration()
    
    # Tests sp√©cifiques
    db_ok = check_database_connection()
    api_ok = check_api_keys()
    
    logger.info("\n" + "=" * 50)
    logger.info("üìã RAPPORT FINAL")
    logger.info("=" * 50)
    
    all_checks = [
        ("Configuration g√©n√©rale", config_valid),
        ("Base de donn√©es", db_ok),
        ("Cl√©s API", api_ok),
    ]
    
    for check_name, status in all_checks:
        status_icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"{status_icon} {check_name}: {'OK' if status else '√âCHEC'}")
    
    overall_success = all(check[1] for check in all_checks)
    
    if overall_success:
        logger.info("\nüéâ Toutes les v√©rifications pass√©es ! Phase 3 pr√™te.")
        return 0
    else:
        logger.info("\n‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©. V√©rifiez la configuration.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
