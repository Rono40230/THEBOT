#!/usr/bin/env python3
"""
Test Phase 3 - Interface Utilisateur Avanc√©e
Validation des nouveaux composants UI et fonctionnalit√©s
"""

import sys
import os
import time
from datetime import datetime

# Ajouter le chemin du projet
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_advanced_dashboard():
    """Test du dashboard avanc√©"""
    print("\nüß™ TEST DASHBOARD AVANC√â")
    print("=" * 40)
    
    try:
        from dash_modules.components.advanced_dashboard import advanced_dashboard
        
        print("‚úÖ Dashboard avanc√© import√©")
        
        # Test cr√©ation layout
        layout = advanced_dashboard.create_layout()
        print("‚úÖ Layout principal cr√©√©")
        
        # Test widgets catalog
        widgets_count = len(advanced_dashboard.widget_catalog)
        print(f"‚úÖ Catalogue widgets: {widgets_count} widgets disponibles")
        
        # Test widgets individuels
        widget_types = ['market_overview', 'news_feed', 'price_charts', 'alerts']
        working_widgets = 0
        
        for widget_type in widget_types:
            try:
                widget_content = advanced_dashboard.get_widget_content(widget_type)
                print(f"   ‚úÖ Widget {widget_type}: OK")
                working_widgets += 1
            except Exception as e:
                print(f"   ‚ùå Widget {widget_type}: {e}")
        
        widget_success_rate = (working_widgets / len(widget_types)) * 100
        print(f"üìä Widgets fonctionnels: {working_widgets}/{len(widget_types)} ({widget_success_rate:.1f}%)")
        
        return widget_success_rate >= 75
        
    except Exception as e:
        print(f"‚ùå Erreur dashboard: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_widget_manager():
    """Test du gestionnaire de widgets"""
    print("\nüß™ TEST GESTIONNAIRE WIDGETS")
    print("=" * 40)
    
    try:
        from dash_modules.components.widget_manager import widget_manager
        
        print("‚úÖ Widget Manager import√©")
        
        # Test layouts pr√©d√©finis
        predefined_layouts = widget_manager.predefined_layouts
        print(f"‚úÖ Layouts pr√©d√©finis: {len(predefined_layouts)}")
        
        for layout_id, layout_info in predefined_layouts.items():
            print(f"   - {layout_id}: {layout_info['name']}")
        
        # Test sauvegarde/chargement
        test_layout = widget_manager.default_widgets
        save_success = widget_manager.save_layout("test_phase3", test_layout, "test_user")
        print(f"‚úÖ Sauvegarde test: {'OK' if save_success else 'ERREUR'}")
        
        if save_success:
            loaded_layout = widget_manager.load_layout("test_phase3", "test_user")
            load_success = loaded_layout is not None
            print(f"‚úÖ Chargement test: {'OK' if load_success else 'ERREUR'}")
        
        # Test validation layout
        validated = widget_manager.validate_layout(test_layout)
        print(f"‚úÖ Validation layout: {len(validated)} widgets valid√©s")
        
        # Test layouts disponibles
        available = widget_manager.get_available_layouts("test_user")
        print(f"‚úÖ Layouts disponibles: {len(available)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur widget manager: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_advanced_news_feed():
    """Test de l'interface news avanc√©e"""
    print("\nüß™ TEST INTERFACE NEWS AVANC√âE")
    print("=" * 40)
    
    try:
        from dash_modules.components.advanced_news_feed import advanced_news_feed
        
        print("‚úÖ News Feed avanc√© import√©")
        
        # Test interface principale
        news_interface = advanced_news_feed.create_news_interface()
        print("‚úÖ Interface news cr√©√©e")
        
        # Test cat√©gories et sources
        categories_count = len(advanced_news_feed.news_categories)
        sources_count = len(advanced_news_feed.news_sources)
        print(f"‚úÖ Cat√©gories: {categories_count}, Sources: {sources_count}")
        
        # Test formatage articles (avec donn√©es factices)
        fake_articles = [
            {
                'title': 'Test Article 1',
                'summary': 'R√©sum√© de test',
                'source': 'Test Source',
                'category': 'crypto',
                'published': datetime.now().isoformat(),
                'url': 'https://example.com'
            },
            {
                'title': 'Test Article 2',
                'summary': 'Autre r√©sum√© de test',
                'source': 'CoinDesk News',
                'category': 'economic',
                'published': datetime.now().isoformat(),
                'url': 'https://example2.com'
            }
        ]
        
        formatted = advanced_news_feed.format_news_articles(fake_articles, {})
        print(f"‚úÖ Formatage articles: {len(formatted)} articles format√©s")
        
        # Test filtres
        filtered = advanced_news_feed.filter_articles(fake_articles, {
            'category': 'crypto',
            'sort': 'newest'
        })
        print(f"‚úÖ Filtres: {len(filtered)} articles apr√®s filtrage")
        
        # Test statistiques
        stats = advanced_news_feed.get_news_statistics(fake_articles)
        print(f"‚úÖ Statistiques: {stats['total']} total, {stats['today']} aujourd'hui")
        
        return len(formatted) > 0 and stats['total'] > 0
        
    except Exception as e:
        print(f"‚ùå Erreur news feed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_advanced_charts():
    """Test des graphiques avanc√©s"""
    print("\nüß™ TEST GRAPHIQUES AVANC√âS")
    print("=" * 40)
    
    try:
        from dash_modules.components.advanced_charts import advanced_charts
        
        print("‚úÖ Charts avanc√©s import√©s")
        
        # Test interface
        chart_interface = advanced_charts.create_advanced_chart_interface()
        print("‚úÖ Interface graphiques cr√©√©e")
        
        # Test configurations
        chart_types_count = len(advanced_charts.chart_types)
        timeframes_count = len(advanced_charts.timeframes)
        indicators_count = len(advanced_charts.indicators)
        
        print(f"‚úÖ Types graphiques: {chart_types_count}")
        print(f"‚úÖ Timeframes: {timeframes_count}")
        print(f"‚úÖ Indicateurs: {indicators_count}")
        
        # Test cr√©ation graphique vide
        empty_chart = advanced_charts.create_empty_chart("Test")
        print("‚úÖ Graphique vide cr√©√©")
        
        # Test indicateurs (avec donn√©es factices)
        import pandas as pd
        import numpy as np
        
        # Cr√©er donn√©es factices OHLCV
        dates = pd.date_range(start='2025-01-01', periods=100, freq='H')
        np.random.seed(42)
        
        fake_data = pd.DataFrame({
            'open': 50000 + np.cumsum(np.random.randn(100) * 100),
            'high': 50000 + np.cumsum(np.random.randn(100) * 100) + 200,
            'low': 50000 + np.cumsum(np.random.randn(100) * 100) - 200,
            'close': 50000 + np.cumsum(np.random.randn(100) * 100),
            'volume': np.random.randint(1000, 10000, 100)
        }, index=dates)
        
        # Corriger les donn√©es pour qu'elles soient coh√©rentes
        for i in range(len(fake_data)):
            high = max(fake_data.iloc[i]['open'], fake_data.iloc[i]['close']) + abs(np.random.randn() * 50)
            low = min(fake_data.iloc[i]['open'], fake_data.iloc[i]['close']) - abs(np.random.randn() * 50)
            fake_data.iloc[i, fake_data.columns.get_loc('high')] = high
            fake_data.iloc[i, fake_data.columns.get_loc('low')] = low
        
        # Test indicateurs techniques
        sma = advanced_charts.calculate_sma(fake_data['close'], 20)
        ema = advanced_charts.calculate_ema(fake_data['close'], 20)
        rsi = advanced_charts.calculate_rsi(fake_data['close'], 14)
        
        indicators_working = 0
        if not sma.isna().all():
            print("   ‚úÖ SMA calcul√©")
            indicators_working += 1
        if not ema.isna().all():
            print("   ‚úÖ EMA calcul√©")
            indicators_working += 1
        if not rsi.isna().all():
            print("   ‚úÖ RSI calcul√©")
            indicators_working += 1
        
        # Test cr√©ation graphique avec donn√©es
        config = {
            'symbol': 'BTCUSDT',
            'timeframe': '1h',
            'chart_type': 'candlestick',
            'indicators': ['sma'],
            'theme': 'default',
            'display_options': ['show_volume']
        }
        
        chart_fig = advanced_charts.create_candlestick_chart(fake_data, config)
        print("‚úÖ Graphique chandelier cr√©√©")
        
        success_rate = (indicators_working / 3) * 100
        print(f"üìä Indicateurs fonctionnels: {indicators_working}/3 ({success_rate:.1f}%)")
        
        return success_rate >= 66  # Au moins 2/3 des indicateurs
        
    except Exception as e:
        print(f"‚ùå Erreur charts: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_phase3():
    """Test d'int√©gration Phase 3"""
    print("\nüß™ TEST INT√âGRATION PHASE 3")
    print("=" * 40)
    
    try:
        # Test imports combin√©s
        from dash_modules.components.advanced_dashboard import advanced_dashboard
        from dash_modules.components.widget_manager import widget_manager
        from dash_modules.components.advanced_news_feed import advanced_news_feed
        from dash_modules.components.advanced_charts import advanced_charts
        
        print("‚úÖ Tous les composants Phase 3 import√©s")
        
        # Test compatibilit√© avec infrastructure Phase 1+2
        try:
            from dash_modules.core.rss_parser import RSSParser
            from dash_modules.core.intelligent_cache import get_global_cache
            from dash_modules.core.specialized_api_manager import specialized_api_manager
            from dash_modules.data_providers.real_data_manager import real_data_manager
            
            infra_ok = True
            print("‚úÖ Infrastructure Phases 1-2 compatible")
        except Exception as e:
            print(f"‚ö†Ô∏è Probl√®me compatibilit√© infrastructure: {e}")
            infra_ok = False
        
        # Test cr√©ation dashboard complet
        try:
            # Layout avec widgets Phase 3
            layout = advanced_dashboard.create_layout()
            
            # Configuration avec widget manager
            available_layouts = widget_manager.get_available_layouts()
            
            # Interface news
            news_ui = advanced_news_feed.create_news_interface()
            
            # Interface charts
            charts_ui = advanced_charts.create_advanced_chart_interface()
            
            print("‚úÖ Int√©gration UI compl√®te fonctionnelle")
            integration_ok = True
            
        except Exception as e:
            print(f"‚ùå Erreur int√©gration UI: {e}")
            integration_ok = False
        
        return infra_ok and integration_ok
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")
        return False

def main():
    """Fonction principale de test Phase 3"""
    print("üöÄ THEBOT - TEST PHASE 3 : INTERFACE UTILISATEUR AVANC√âE")
    print("=" * 70)
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("Dashboard Avanc√©", test_advanced_dashboard),
        ("Gestionnaire Widgets", test_widget_manager),
        ("Interface News Avanc√©e", test_advanced_news_feed),
        ("Graphiques Avanc√©s", test_advanced_charts),
        ("Int√©gration Phase 3", test_integration_phase3)
    ]
    
    results = []
    total_start_time = time.time()
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ D√©marrage: {test_name}")
            start_time = time.time()
            result = test_func()
            elapsed = time.time() - start_time
            
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{status} {test_name} ({elapsed:.2f}s)")
            results.append((test_name, result, elapsed))
            
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE dans {test_name}: {e}")
            results.append((test_name, False, 0))
    
    # R√©sum√© final
    total_time = time.time() - total_start_time
    
    print("\n" + "=" * 70)
    print("üìã R√âSUM√â PHASE 3 - INTERFACE UTILISATEUR AVANC√âE")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result, elapsed in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name} ({elapsed:.2f}s)")
        if result:
            passed += 1
    
    success_rate = (passed / total) * 100
    print(f"\nüéØ R√©sultat Phase 3: {passed}/{total} tests r√©ussis ({success_rate:.1f}%)")
    print(f"‚è±Ô∏è Temps total: {total_time:.2f}s")
    
    if passed == total:
        print("\nüéâ PHASE 3 COMPL√àTE: SUCC√àS TOTAL!")
        print("‚úÖ Interface utilisateur avanc√©e d√©ploy√©e")
        print("üé® Dashboard moderne op√©rationnel")
        print("üì∞ Feed RSS avanc√© fonctionnel")
        print("üìä Graphiques avec indicateurs techniques")
    elif passed >= total * 0.7:
        print("\n‚ö†Ô∏è PHASE 3: Succ√®s partiel")
        print("üîß Quelques ajustements n√©cessaires")
    else:
        print("\n‚ùå PHASE 3: Probl√®mes importants")
        print("üõ†Ô∏è R√©vision n√©cessaire")
    
    print(f"\nüìà PROGRESSION GLOBALE THEBOT:")
    print("   ‚úÖ Phase 1: Infrastructure RSS (100%)")
    print("   ‚úÖ Phase 2: Optimisations APIs (100%)")
    print(f"   üé® Phase 3: Interface Avanc√©e ({success_rate:.1f}%)")
    print("   üí∞ Co√ªt total: 0‚Ç¨/mois")
    
    if success_rate >= 80:
        print(f"\nüöÄ THEBOT PR√äT POUR PRODUCTION!")
        print("   Interface moderne et performante")
        print("   Infrastructure optimis√©e")
        print("   Donn√©es en temps r√©el")
        print("   Fonctionnalit√©s avanc√©es")
    
    return passed >= total * 0.7

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)