#!/usr/bin/env python3
"""
THEBOT - Interface Native Simple
Version simplifi√©e sans PyQt6 pour tests
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

import tkinter as tk
from tkinter import ttk, scrolledtext
import numpy as np
import pandas as pd
from decimal import Decimal


class SimpleTHEBOTApp:
    """Application THEBOT native simplifi√©e"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("ü§ñ THEBOT - Application Native")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2b2b2b')
        
        self.create_ui()
        self.setup_calculators()
        
    def setup_calculators(self):
        """Configurer les calculateurs directement"""
        try:
            from thebot.indicators.basic.sma.config import SMAConfig
            from thebot.indicators.basic.sma.calculator import SMACalculator
            from thebot.indicators.basic.ema.config import EMAConfig  
            from thebot.indicators.basic.ema.calculator import EMACalculator
            from thebot.indicators.oscillators.rsi.config import RSIConfig
            from thebot.indicators.oscillators.rsi.calculator import RSICalculator
            from thebot.indicators.volatility.atr.config import ATRConfig
            from thebot.indicators.volatility.atr.calculator import ATRCalculator
            
            self.sma_calc = SMACalculator(SMAConfig(period=20))
            self.ema_calc = EMACalculator(EMAConfig(period=12))
            self.rsi_calc = RSICalculator(RSIConfig(period=14))
            self.atr_calc = ATRCalculator(ATRConfig(period=14))
            
            self.log("‚úÖ Calculateurs initialis√©s avec succ√®s")
            
        except Exception as e:
            self.log(f"‚ùå Erreur init calculateurs: {e}")
            
        # Donn√©es d'exemple  
        self.sample_prices = [Decimal(str(100 + np.random.randn() * 2 + i * 0.1)) for i in range(100)]
        
    def create_ui(self):
        """Cr√©er l'interface utilisateur"""
        
        # Frame principal
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Titre
        title_label = tk.Label(main_frame, text="ü§ñ THEBOT v1.0 - Native App", 
                              font=('Arial', 16, 'bold'), bg='#2b2b2b', fg='white')
        title_label.pack(pady=(0, 10))
        
        # Frame de contr√¥les
        controls_frame = ttk.LabelFrame(main_frame, text="üìä Indicateurs", padding=10)
        controls_frame.pack(fill=tk.X, pady=(0, 10))
        
        # SMA
        sma_frame = ttk.Frame(controls_frame)
        sma_frame.pack(fill=tk.X, pady=2)
        ttk.Label(sma_frame, text="SMA P√©riode:").pack(side=tk.LEFT, padx=(0, 5))
        self.sma_var = tk.IntVar(value=20)
        sma_spin = ttk.Spinbox(sma_frame, from_=1, to=200, width=10, textvariable=self.sma_var)
        sma_spin.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(sma_frame, text="Calculer SMA", command=self.calc_sma).pack(side=tk.LEFT)
        
        # EMA
        ema_frame = ttk.Frame(controls_frame)
        ema_frame.pack(fill=tk.X, pady=2)
        ttk.Label(ema_frame, text="EMA P√©riode:").pack(side=tk.LEFT, padx=(0, 5))
        self.ema_var = tk.IntVar(value=12)
        ema_spin = ttk.Spinbox(ema_frame, from_=1, to=200, width=10, textvariable=self.ema_var)
        ema_spin.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(ema_frame, text="Calculer EMA", command=self.calc_ema).pack(side=tk.LEFT)
        
        # RSI
        rsi_frame = ttk.Frame(controls_frame)
        rsi_frame.pack(fill=tk.X, pady=2)
        ttk.Label(rsi_frame, text="RSI P√©riode:").pack(side=tk.LEFT, padx=(0, 5))
        self.rsi_var = tk.IntVar(value=14)
        rsi_spin = ttk.Spinbox(rsi_frame, from_=1, to=50, width=10, textvariable=self.rsi_var)
        rsi_spin.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(rsi_frame, text="Calculer RSI", command=self.calc_rsi).pack(side=tk.LEFT)
        
        # ATR
        atr_frame = ttk.Frame(controls_frame)
        atr_frame.pack(fill=tk.X, pady=2)
        ttk.Label(atr_frame, text="ATR P√©riode:").pack(side=tk.LEFT, padx=(0, 5))
        self.atr_var = tk.IntVar(value=14)
        atr_spin = ttk.Spinbox(atr_frame, from_=1, to=50, width=10, textvariable=self.atr_var)
        atr_spin.pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(atr_frame, text="Calculer ATR", command=self.calc_atr).pack(side=tk.LEFT)
        
        # Boutons d'action
        action_frame = ttk.Frame(controls_frame)
        action_frame.pack(fill=tk.X, pady=(10, 0))
        ttk.Button(action_frame, text="üîÑ Nouvelles Donn√©es", command=self.refresh_data).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üß™ Tests", command=self.run_tests).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üéØ Test Tous", command=self.test_all_indicators).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(action_frame, text="üßπ Clear", command=self.clear_log).pack(side=tk.LEFT)
        
        # Zone de r√©sultats
        self.log_text = scrolledtext.ScrolledText(main_frame, height=15, bg='#1e1e1e', fg='white')
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        self.log("üöÄ THEBOT Application Native d√©marr√©e")
        self.log("üìä Architecture ultra-modulaire active")
        
    def log(self, message):
        """Ajouter un message au log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.log_text.update()
        
    def calc_sma(self):
        """Calculer SMA"""
        try:
            period = self.sma_var.get()
            self.log(f"üîÑ Calcul SMA p√©riode {period}...")
            
            # Recr√©er avec nouvelle p√©riode
            from thebot.indicators.basic.sma.config import SMAConfig
            from thebot.indicators.basic.sma.calculator import SMACalculator
            calc = SMACalculator(SMAConfig(period=period))
            
            results = []
            for price in self.sample_prices[-50:]:  # Derni√®res 50 valeurs
                sma_val = calc.add_price(price)
                if sma_val is not None:
                    results.append(float(sma_val))
                    
            if results:
                avg = np.mean(results)
                self.log(f"‚úÖ SMA({period}): {avg:.4f} | Points: {len(results)} | Dernier: {results[-1]:.4f}")
            else:
                self.log(f"‚ùå SMA({period}): Donn√©es insuffisantes")
                
        except Exception as e:
            self.log(f"‚ùå Erreur SMA: {str(e)}")
            
    def calc_ema(self):
        """Calculer EMA"""
        try:
            period = self.ema_var.get()
            self.log(f"üîÑ Calcul EMA p√©riode {period}...")
            
            from thebot.indicators.basic.ema.config import EMAConfig
            from thebot.indicators.basic.ema.calculator import EMACalculator
            calc = EMACalculator(EMAConfig(period=period))
            
            results = []
            for price in self.sample_prices[-50:]:
                ema_val = calc.add_price(price)
                if ema_val is not None:
                    results.append(float(ema_val))
                    
            if results:
                trend = results[-1] - results[-10] if len(results) > 10 else 0
                self.log(f"‚úÖ EMA({period}): {results[-1]:.4f} | Points: {len(results)} | Trend: {trend:.4f}")
            else:
                self.log(f"‚ùå EMA({period}): Donn√©es insuffisantes")
                
        except Exception as e:
            self.log(f"‚ùå Erreur EMA: {str(e)}")
            
    def calc_rsi(self):
        """Calculer RSI"""
        try:
            period = self.rsi_var.get()
            self.log(f"üîÑ Calcul RSI p√©riode {period}...")
            
            from thebot.indicators.oscillators.rsi.config import RSIConfig
            from thebot.indicators.oscillators.rsi.calculator import RSICalculator
            calc = RSICalculator(RSIConfig(period=period))
            
            results = []
            for price in self.sample_prices[-50:]:
                rsi_val = calc.add_price(price)
                if rsi_val is not None:
                    results.append(float(rsi_val))
                    
            if results:
                current_rsi = results[-1]
                status = "üî¥ Survente" if current_rsi < 30 else "üü¢ Surachat" if current_rsi > 70 else "üîµ Neutre"
                self.log(f"‚úÖ RSI({period}): {current_rsi:.2f} | {status} | Points: {len(results)}")
            else:
                self.log(f"‚ùå RSI({period}): Donn√©es insuffisantes")
                
        except Exception as e:
            self.log(f"‚ùå Erreur RSI: {str(e)}")
            
    def calc_atr(self):
        """Calculer ATR"""
        try:
            period = self.atr_var.get()
            self.log(f"üîÑ Calcul ATR p√©riode {period}...")
            
            from thebot.indicators.volatility.atr.config import ATRConfig
            from thebot.indicators.volatility.atr.calculator import ATRCalculator
            from thebot.core.types import MarketData, TimeFrame
            import pandas as pd
            
            calc = ATRCalculator(ATRConfig(period=period))
            
            results = []
            # Simuler des donn√©es OHLC √† partir des prix
            for i in range(len(self.sample_prices) - 1):
                price = float(self.sample_prices[i])
                next_price = float(self.sample_prices[i + 1])
                
                # Simuler High/Low bas√©s sur le prix
                volatility = abs(next_price - price) + 0.5
                high = price + volatility * np.random.random()
                low = price - volatility * np.random.random()
                
                market_data = MarketData(
                    timestamp=pd.Timestamp.now(),
                    open=Decimal(str(price)),
                    high=Decimal(str(high)),
                    low=Decimal(str(low)),
                    close=self.sample_prices[i + 1],
                    volume=Decimal('1000'),
                    timeframe=TimeFrame.M1
                )
                
                atr_val = calc.calculate(market_data)
                if atr_val is not None:
                    results.append(float(atr_val))
                    
            if results:
                current_atr = results[-1]
                volatility_level = "üìà √âlev√©e" if current_atr > 2.0 else "üìä Normale" if current_atr > 1.0 else "üìâ Faible"
                self.log(f"‚úÖ ATR({period}): {current_atr:.4f} | Volatilit√©: {volatility_level} | Points: {len(results)}")
            else:
                self.log(f"‚ùå ATR({period}): Donn√©es insuffisantes")
                
        except Exception as e:
            self.log(f"‚ùå Erreur ATR: {str(e)}")
            
    def refresh_data(self):
        """G√©n√©rer de nouvelles donn√©es"""
        self.sample_prices = [Decimal(str(100 + np.random.randn() * 2 + i * 0.1)) for i in range(100)]
        self.log("üîÑ Nouvelles donn√©es g√©n√©r√©es (100 points)")
        
    def run_tests(self):
        """Lancer les tests"""
        self.log("üß™ Lancement des tests unitaires...")
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, '-m', 'pytest', 
                'tests/unit/indicators/', '-v'
            ], capture_output=True, text=True, cwd='/home/rono/THEBOT')
            
            if result.returncode == 0:
                self.log("‚úÖ Tous les tests passent !")
            else:
                self.log(f"‚ùå Tests √©chou√©s: {result.returncode}")
        except Exception as e:
            self.log(f"‚ùå Erreur tests: {e}")
            
    def test_all_indicators(self):
        """Tester tous les indicateurs en une fois"""
        self.log("üéØ Test complet de tous les indicateurs...")
        self.log("-" * 40)
        
        try:
            # Test SMA
            self.calc_sma()
            
            # Test EMA  
            self.calc_ema()
            
            # Test RSI
            self.calc_rsi()
            
            # Test ATR
            self.calc_atr()
            
            self.log("-" * 40)
            self.log("üéâ Test complet termin√© ! Tous les indicateurs test√©s.")
            
        except Exception as e:
            self.log(f"‚ùå Erreur test complet: {e}")
            
    def clear_log(self):
        """Nettoyer le log"""
        self.log_text.delete(1.0, tk.END)


def main():
    """Point d'entr√©e principal"""
    print("üöÄ THEBOT - Application Native Simple")
    
    try:
        root = tk.Tk()
        app = SimpleTHEBOTApp(root)
        root.mainloop()
    except KeyboardInterrupt:
        print("\nüõë Arr√™t demand√©")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")


if __name__ == '__main__':
    main()