from .logger import logger
"""
Data Manager - Gestion Centralis√©e des Donn√©es THEBOT
Architecture MVC - Couche MODEL conforme .clinerules
"""

import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union

import aiohttp
import numpy as np
import pandas as pd

# Configuration du logging conforme .clinerules
logger = logging.getLogger(__name__)


@dataclass
class MarketDataConfig:
    """Configuration des donn√©es de march√© selon .clinerules"""

    default_limit: int = 500
    default_interval: str = "1h"
    timeout_seconds: int = 10
    fallback_enabled: bool = True


class AsyncDataManager:
    """
    Gestionnaire centralis√© des donn√©es financi√®res - Version Async

    Responsabilit√©s selon .clinerules :
    - Single Responsibility : Gestion des donn√©es uniquement
    - Type hints obligatoires
    - Logging structur√©
    - Gestion d'erreurs robuste
    - I/O asynchrone avec aiohttp
    """

    def __init__(self, config: Optional[MarketDataConfig] = None) -> None:
        """
        Initialise le gestionnaire de donn√©es async

        Args:
            config: Configuration optionnelle du gestionnaire
        """
        self.config: MarketDataConfig = config or MarketDataConfig()
        self.market_data: Dict[str, pd.DataFrame] = {}
        self.logger: logging.Logger = logging.getLogger("thebot.async_data_manager")
        self._session: Optional[aiohttp.ClientSession] = None

        # Cache des symboles pour √©viter les appels r√©p√©t√©s
        self._symbols_cache: Optional[List[str]] = None
        self._cache_timestamp: Optional[datetime] = None
        self._cache_ttl_minutes: int = 60  # TTL cache 1 heure

        self.logger.info("üîß AsyncDataManager initialis√©")

    async def __aenter__(self):
        """Context manager entry - initialise la session aiohttp"""
        await self._ensure_session()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit - ferme la session aiohttp"""
        await self._close_session()

    async def _ensure_session(self) -> None:
        """S'assure qu'une session aiohttp est disponible"""
        if self._session is None or self._session.closed:
            timeout = aiohttp.ClientTimeout(total=self.config.timeout_seconds)
            self._session = aiohttp.ClientSession(timeout=timeout)
            self.logger.debug("üì° Session aiohttp initialis√©e")

    async def _close_session(self) -> None:
        """Ferme la session aiohttp"""
        if self._session and not self._session.closed:
            await self._session.close()
            self.logger.debug("üì° Session aiohttp ferm√©e")

    async def get_all_binance_symbols(self) -> List[str]:
        """
        R√©cup√®re tous les symboles Binance disponibles avec cache - Version Async

        Returns:
            List[str]: Liste des symboles USDT trading actifs

        Raises:
            aiohttp.ClientError: En cas d'erreur r√©seau
        """
        try:
            # V√©rifier le cache
            if self._is_cache_valid():
                self.logger.debug("üì¶ Utilisation du cache des symboles")
                return self._symbols_cache

            await self._ensure_session()
            self.logger.info("üîÑ R√©cup√©ration des symboles Binance...")

            url = "https://api.binance.com/api/v3/exchangeInfo"
            async with self._session.get(url) as response:
                response.raise_for_status()
                data = await response.json()

            symbols = []

            for symbol_info in data["symbols"]:
                if symbol_info["status"] == "TRADING" and symbol_info[
                    "symbol"
                ].endswith("USDT"):
                    symbols.append(symbol_info["symbol"])

            # Mise √† jour du cache
            self._symbols_cache = sorted(symbols)
            self._cache_timestamp = datetime.now()

            self.logger.info(f"‚úÖ {len(symbols)} symboles Binance charg√©s")
            return self._symbols_cache

        except aiohttp.ClientError as e:
            self.logger.error(f"‚ùå Erreur r√©seau API exchange info: {e}")
            return self.get_popular_symbols()
        except Exception as e:
            self.logger.error(f"‚ùå Erreur inattendue r√©cup√©ration symboles: {e}")
            return self.get_popular_symbols()

    def _is_cache_valid(self) -> bool:
        """V√©rifie si le cache des symboles est valide"""
        if not self._symbols_cache or not self._cache_timestamp:
            return False

        elapsed = datetime.now() - self._cache_timestamp
        return elapsed.total_seconds() < (self._cache_ttl_minutes * 60)

    def get_popular_symbols(self) -> List[str]:
        """
        Retourne les symboles populaires en fallback

        Returns:
            List[str]: Symboles crypto populaires
        """
        return [
            "BTCUSDT",
            "ETHUSDT",
            "BNBUSDT",
            "ADAUSDT",
            "SOLUSDT",
            "XRPUSDT",
            "DOTUSDT",
            "LINKUSDT",
            "LTCUSDT",
            "BCHUSDT",
            "EOSUSDT",
            "TRXUSDT",
            "ETCUSDT",
            "XLMUSDT",
            "ATOMUSDT",
        ]

    def search_symbols(
        self, query: str, symbols_list: Optional[List[str]] = None, limit: int = 10
    ) -> List[str]:
        """
        Recherche des symboles selon une requ√™te

        Args:
            query: Terme de recherche
            symbols_list: Liste optionnelle de symboles (sinon utilise tous les symboles)
            limit: Nombre maximum de r√©sultats

        Returns:
            List[str]: Symboles correspondants
        """
        if not query:
            return self.get_popular_symbols()[:limit]

        if symbols_list is None:
            symbols_list = self.get_all_binance_symbols()

        query_upper = query.upper()
        matches = []

        # Recherche exacte au d√©but (priorit√©)
        for symbol in symbols_list:
            if symbol.startswith(query_upper):
                matches.append(symbol)

        # Recherche partielle
        for symbol in symbols_list:
            if query_upper in symbol and symbol not in matches:
                matches.append(symbol)

        result = matches[:limit]
        self.logger.debug(f"üîç Recherche '{query}': {len(result)} r√©sultats")
        return result

    async def get_binance_data(
        self, symbol: str, interval: Optional[str] = None, limit: Optional[int] = None
    ) -> Optional[pd.DataFrame]:
        """
        R√©cup√®re les donn√©es OHLCV de Binance - Version Async

        Args:
            symbol: Symbole √† r√©cup√©rer (ex: 'BTCUSDT')
            interval: Intervalle de temps (d√©faut: config.default_interval)
            limit: Nombre de bougies (d√©faut: config.default_limit)

        Returns:
            Optional[pd.DataFrame]: DataFrame avec colonnes OHLCV ou None si erreur

        Raises:
            ValueError: Si symbol est invalide
        """
        if not symbol or not isinstance(symbol, str):
            raise ValueError("Symbol doit √™tre une cha√Æne non vide")

        interval = interval or self.config.default_interval
        limit = limit or self.config.default_limit

        try:
            await self._ensure_session()
            self.logger.info(f"üîÑ Chargement {symbol} ({interval}, {limit} points)...")

            url = "https://api.binance.com/api/v3/klines"
            params = {"symbol": symbol, "interval": interval, "limit": limit}

            async with self._session.get(url, params=params) as response:
                response.raise_for_status()
                data = await response.json()

            if not data:
                self.logger.warning(f"‚ö†Ô∏è Aucune donn√©e re√ßue pour {symbol}")
                return None

            df = pd.DataFrame(
                data,
                columns=[
                    "timestamp",
                    "open",
                    "high",
                    "low",
                    "close",
                    "volume",
                    "close_time",
                    "quote_asset_volume",
                    "number_of_trades",
                    "taker_buy_base_asset_volume",
                    "taker_buy_quote_asset_volume",
                    "ignore",
                ],
            )

            # Conversion des types (conforme .clinerules)
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            numeric_columns = ["open", "high", "low", "close", "volume"]
            for col in numeric_columns:
                df[col] = pd.to_numeric(df[col], errors="coerce")

            # Index sur timestamp pour compatibilit√©
            df.set_index("timestamp", inplace=True)
            df.dropna(inplace=True)  # Supprimer les lignes avec des NaN

            self.logger.info(f"‚úÖ {symbol}: {len(df)} points r√©cup√©r√©s")
            return df

        except aiohttp.ClientError as e:
            self.logger.error(f"‚ùå Erreur r√©seau pour {symbol}: {e}")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå Erreur inattendue pour {symbol}: {e}")
            return None

    def load_symbol_data(
        self, symbol: str, interval: str = "1h", limit: int = 200
    ) -> pd.DataFrame:
        """
        Charge et met en cache les donn√©es d'un symbole

        Args:
            symbol: Symbole √† charger
            interval: Intervalle de temps
            limit: Nombre de bougies

        Returns:
            pd.DataFrame: Donn√©es du symbole (r√©elles ou fallback)
        """
        try:
            df = self.get_binance_data(symbol, interval, limit)

            if df is not None and not df.empty:
                self.market_data[symbol] = df
                return df
            else:
                # Fallback avec donn√©es simul√©es
                if self.config.fallback_enabled:
                    self.logger.warning(f"‚ö†Ô∏è Fallback simulation pour {symbol}")
                    fallback_data = self._create_fallback_data(symbol)
                    self.market_data[symbol] = fallback_data
                    return fallback_data
                else:
                    raise ValueError(f"Impossible de charger les donn√©es pour {symbol}")

        except Exception as e:
            self.logger.error(f"‚ùå Erreur chargement {symbol}: {e}")
            if self.config.fallback_enabled:
                return self._create_fallback_data(symbol)
            raise

    def _create_fallback_data(self, symbol: str) -> pd.DataFrame:
        """
        Cr√©e des donn√©es simul√©es pour les tests

        Args:
            symbol: Symbole pour lequel cr√©er des donn√©es

        Returns:
            pd.DataFrame: Donn√©es OHLCV simul√©es
        """
        try:
            dates = pd.date_range(
                start=datetime.now() - timedelta(days=7), end=datetime.now(), freq="1h"
            )

            # Prix de base selon le symbole
            base_prices = {
                "BTCUSDT": 43000,
                "ETHUSDT": 2600,
                "BNBUSDT": 250,
                "ADAUSDT": 0.5,
                "SOLUSDT": 50,
                "XRPUSDT": 0.6,
                "DOTUSDT": 8,
                "LINKUSDT": 15,
            }
            base_price = base_prices.get(symbol, 100)

            # G√©n√©ration prix simul√©s avec marche al√©atoire
            np.random.seed(hash(symbol) % 2**32)  # Reproductibilit√© par symbole
            prices = [base_price]

            for i in range(1, len(dates)):
                change_percent = np.random.randn() * 0.02  # 2% volatilit√©
                new_price = prices[-1] * (1 + change_percent)
                prices.append(max(0.01, new_price))  # Prix minimum

            # Construction OHLCV
            data = []
            for i in range(len(prices) - 1):
                open_price = prices[i]
                close_price = prices[i + 1]

                # High/Low avec volatilit√© intraday
                volatility = abs(np.random.randn()) * 0.01
                high_price = max(open_price, close_price) * (1 + volatility)
                low_price = min(open_price, close_price) * (1 - volatility)

                # Volume simul√©
                volume = abs(np.random.randn()) * 1000 + 500

                data.append(
                    {
                        "open": round(open_price, 8),
                        "high": round(high_price, 8),
                        "low": round(low_price, 8),
                        "close": round(close_price, 8),
                        "volume": round(volume, 2),
                    }
                )

            df = pd.DataFrame(data, index=dates[1:])
            self.logger.debug(
                f"üìä Donn√©es simul√©es cr√©√©es pour {symbol}: {len(df)} points"
            )
            return df

        except Exception as e:
            self.logger.error(f"‚ùå Erreur cr√©ation donn√©es simul√©es pour {symbol}: {e}")
            # Fallback ultime : DataFrame minimal
            return pd.DataFrame(
                {
                    "open": [100],
                    "high": [105],
                    "low": [95],
                    "close": [102],
                    "volume": [1000],
                },
                index=[datetime.now()],
            )

    def get_cached_data(self, symbol: str) -> Optional[pd.DataFrame]:
        """
        R√©cup√®re les donn√©es mises en cache

        Args:
            symbol: Symbole √† r√©cup√©rer

        Returns:
            Optional[pd.DataFrame]: Donn√©es en cache ou None
        """
        return self.market_data.get(symbol)

    def clear_cache(self) -> None:
        """Vide le cache des donn√©es et des symboles"""
        self.market_data.clear()
        self._symbols_cache = None
        self._cache_timestamp = None
        self.logger.info("üóëÔ∏è Cache vid√©")

    def get_cache_info(self) -> Dict[str, Any]:
        """
        Retourne les informations du cache

        Returns:
            Dict: Informations d√©taill√©es du cache
        """
        return {
            "symbols_cached": len(self._symbols_cache) if self._symbols_cache else 0,
            "data_cached": len(self.market_data),
            "cache_valid": self._is_cache_valid(),
            "cache_timestamp": (
                self._cache_timestamp.isoformat() if self._cache_timestamp else None
            ),
            "cached_symbols": list(self.market_data.keys()),
        }


# Instance globale singleton - Version Async
async def get_data_manager() -> AsyncDataManager:
    """Factory function pour obtenir une instance AsyncDataManager"""
    return AsyncDataManager()

# Export conforme .clinerules
__all__ = ["AsyncDataManager", "MarketDataConfig", "get_data_manager", "DataManager"]


# Classe legacy pour compatibilit√© - √Ä migrer vers AsyncDataManager
class DataManager:
    """
    ‚ö†Ô∏è DEPRECATED: Utilisez AsyncDataManager √† la place

    Version synchrone conserv√©e pour compatibilit√© temporaire.
    Sera supprim√©e dans une future version.
    """

    def __init__(self, config: Optional[MarketDataConfig] = None) -> None:
        import warnings
        warnings.warn(
            "DataManager is deprecated. Use AsyncDataManager instead.",
            DeprecationWarning,
            stacklevel=2
        )
        self.config = config or MarketDataConfig()
        self.logger = logging.getLogger("thebot.data_manager_deprecated")

    def get_all_binance_symbols(self) -> List[str]:
        """‚ö†Ô∏è DEPRECATED: M√©thode synchrone - utilisez AsyncDataManager.get_all_binance_symbols()"""
        raise NotImplementedError("Use AsyncDataManager for async operations")

    def get_binance_data(self, symbol: str, interval: Optional[str] = None, limit: Optional[int] = None) -> Optional[pd.DataFrame]:
        """‚ö†Ô∏è DEPRECATED: M√©thode synchrone - utilisez AsyncDataManager.get_binance_data()"""
        raise NotImplementedError("Use AsyncDataManager for async operations")
