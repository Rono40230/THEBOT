"""
Formatage adaptatif des prix pour cryptomonnaies
Affiche intelligemment les 4 chiffres significatifs aprÃ¨s les zÃ©ros
"""
import re
from typing import Union

def format_crypto_price_adaptive(price: Union[float, int, str]) -> str:
    """
    Formate un prix de cryptomonnaie de maniÃ¨re adaptative
    
    RÃ¨gles :
    - Prix >= 1 : Format standard avec 2 dÃ©cimales (ex: $1,234.56)
    - Prix < 1 : Trouve le dernier zÃ©ro et affiche 4 chiffres significatifs suivants
    
    Exemples :
    - 1234.56 â†’ $1,234.56
    - 0.123456 â†’ $0.1234
    - 0.000012345 â†’ $0.00001234
    - 0.00000008976 â†’ $0.00000008976
    - 0.000000000123456 â†’ $0.0000000001234
    
    Args:
        price: Prix Ã  formater (float, int ou string)
        
    Returns:
        str: Prix formatÃ© avec le symbole $
    """
    try:
        # Convertir en float si nÃ©cessaire
        if isinstance(price, str):
            price = float(price)
        elif isinstance(price, int):
            price = float(price)
            
        # GÃ©rer les cas spÃ©ciaux
        if price == 0:
            return "$0.0000"
        
        if price < 0:
            # GÃ©rer les prix nÃ©gatifs (variations)
            return f"-{format_crypto_price_adaptive(abs(price))}"
            
        # Prix >= 1 : format standard avec virgules
        if price >= 1:
            return f"${price:,.2f}"
        
        # Prix < 1 : formatage adaptatif
        # Convertir en chaÃ®ne pour analyser la structure
        price_str = f"{price:.20f}".rstrip('0')  # 20 dÃ©cimales max, enlever zÃ©ros finaux
        
        # Trouver la position du premier chiffre non-zÃ©ro aprÃ¨s la virgule
        match = re.search(r'0\.0*([1-9])', price_str)
        
        if not match:
            # Cas oÃ¹ tous les chiffres sont des zÃ©ros (ne devrait pas arriver)
            return f"${price:.6f}"
        
        # Compter le nombre de zÃ©ros aprÃ¨s la virgule
        zeros_after_decimal = len(match.group(0)) - 3  # -3 pour "0." et le premier chiffre non-zÃ©ro
        
        # Calculer le nombre de dÃ©cimales nÃ©cessaires pour avoir 4 chiffres significatifs
        # +1 pour inclure le premier chiffre non-zÃ©ro + 3 pour les 3 suivants
        significant_decimals = zeros_after_decimal + 4
        
        # Limiter Ã  un maximum raisonnable pour Ã©viter les nombres trop longs
        significant_decimals = min(significant_decimals, 15)
        
        # Formater avec le nombre appropriÃ© de dÃ©cimales
        formatted = f"${price:.{significant_decimals}f}"
        
        # Enlever les zÃ©ros inutiles Ã  la fin
        if '.' in formatted:
            formatted = formatted.rstrip('0').rstrip('.')
            
        # S'assurer qu'on a au moins le format de base si quelque chose a mal tournÃ©
        if formatted == '$':
            formatted = f"${price:.6f}"
            
        return formatted
        
    except (ValueError, TypeError, AttributeError):
        # En cas d'erreur, retourner un format par dÃ©faut
        return f"${float(price):.6f}" if price else "$0.0000"


def format_price_label_adaptive(price: Union[float, int, str]) -> str:
    """
    Formate un prix pour les labels d'indicateurs (sans symbole $)
    
    Args:
        price: Prix Ã  formater
        
    Returns:
        str: Prix formatÃ© sans symbole $
    """
    formatted_with_dollar = format_crypto_price_adaptive(price)
    # Enlever le symbole $ pour les labels
    return formatted_with_dollar[1:] if formatted_with_dollar.startswith('$') else formatted_with_dollar


def format_percentage_change(change: Union[float, int, str], decimals: int = 2) -> str:
    """
    Formate un changement de pourcentage
    
    Args:
        change: Changement en pourcentage
        decimals: Nombre de dÃ©cimales Ã  afficher
        
    Returns:
        str: Changement formatÃ© avec signe et %
    """
    try:
        if isinstance(change, str):
            change = float(change)
        elif isinstance(change, int):
            change = float(change)
            
        sign = "+" if change > 0 else ""
        return f"{sign}{change:.{decimals}f}%"
        
    except (ValueError, TypeError):
        return "0.00%"


def format_volume_adaptive(volume: Union[float, int, str]) -> str:
    """
    Formate un volume de maniÃ¨re lisible
    
    Args:
        volume: Volume Ã  formater
        
    Returns:
        str: Volume formatÃ© (K, M, B, T)
    """
    try:
        if isinstance(volume, str):
            volume = float(volume)
        elif isinstance(volume, int):
            volume = float(volume)
            
        if volume >= 1_000_000_000_000:  # Trillion
            return f"${volume/1_000_000_000_000:.2f}T"
        elif volume >= 1_000_000_000:  # Billion
            return f"${volume/1_000_000_000:.2f}B"
        elif volume >= 1_000_000:  # Million
            return f"${volume/1_000_000:.2f}M"
        elif volume >= 1_000:  # Thousand
            return f"${volume/1_000:.2f}K"
        else:
            return f"${volume:.2f}"
            
    except (ValueError, TypeError):
        return "$0.00"


# Tests de validation (pour dÃ©veloppement)
if __name__ == "__main__":
    # Tests de la fonction principale
    test_prices = [
        1234.56,      # â†’ $1,234.56
        0.123456,     # â†’ $0.1234
        0.000012345,  # â†’ $0.00001234
        0.00000008976, # â†’ $0.00000008976
        0.000000000123456, # â†’ $0.0000000001234
        0.0,          # â†’ $0.0000
        1.0,          # â†’ $1.00
        0.1,          # â†’ $0.1000
        0.01,         # â†’ $0.0100
        0.001,        # â†’ $0.0010
    ]
    
    print("ðŸ§ª Tests formatage prix crypto adaptatif:")
    for price in test_prices:
        formatted = format_crypto_price_adaptive(price)
        print(f"  {price:>15} â†’ {formatted}")