from src.thebot.core.logger import logger
"""
üìä PARAMETERS MANAGER - Gestion Unifi√©e Configuration
====================================================

Centralise TOUS les param√®tres des indicateurs en JSON standardis√©.
Remplace les multiples variables dispers√©es par un syst√®me unifi√©.
"""

import json
from pathlib import Path
from typing import Any, Dict, Optional


class ParametersManager:
    """Gestionnaire unifi√© pour tous les param√®tres des indicateurs"""

    def __init__(self):
        self.config_file = Path("dashboard_configs/indicators_config.json")
        self.default_config = self._get_default_config()
        self.config = self._load_config()

    def _get_default_config(self) -> Dict[str, Any]:
        """Configuration par d√©faut pour tous les indicateurs"""
        return {
            # === INDICATEURS DE BASE ===
            "basic_indicators": {
                "sma": {
                    "enabled": True,  # ‚úÖ ACTIV√â PAR D√âFAUT
                    "period": 20,
                    "min_value": 5,
                    "max_value": 200,
                    "color": "#2196F3",
                },
                "ema": {
                    "enabled": True,  # ‚úÖ ACTIV√â PAR D√âFAUT
                    "period": 12,
                    "min_value": 5,
                    "max_value": 200,
                    "color": "#FF9800",
                },
                "rsi": {
                    "enabled": True,  # ‚úÖ ACTIV√â PAR D√âFAUT
                    "period": 14,
                    "min_value": 2,
                    "max_value": 50,
                    "overbought": 70,
                    "oversold": 30,
                    "color": "#9C27B0",
                },
                "atr": {
                    "enabled": True,  # ‚úÖ ACTIV√â PAR D√âFAUT
                    "period": 14,
                    "min_value": 5,
                    "max_value": 50,
                    "multiplier": 2.0,
                    "color": "#4CAF50",
                },
                "macd": {
                    "enabled": True,  # ‚úÖ ACTIV√â PAR D√âFAUT
                    "fast_period": 12,
                    "slow_period": 26,
                    "signal_period": 9,
                    "color_macd": "#2196F3",
                    "color_signal": "#FF5722",
                    "color_histogram": "#FFC107",
                },
            },
            # === INDICATEURS AVANC√âS ===
            "advanced_indicators": {
                "support_resistance": {
                    "enabled": False,  # ‚ùå D√âSACTIV√â PAR D√âFAUT
                    "strength": 2,
                    "lookback": 50,
                    "min_strength": 1,
                    "max_strength": 5,
                    "min_lookback": 10,
                    "max_lookback": 200,
                },
                "fibonacci": {
                    "enabled": False,  # ‚ùå D√âSACTIV√â PAR D√âFAUT
                    "swing_period": 20,
                    "line_width": 1,
                    "min_swing": 5,
                    "max_swing": 100,
                    "levels": [0.0, 0.236, 0.382, 0.5, 0.618, 0.786, 1.0],
                },
                "pivot_points": {
                    "enabled": False,  # ‚ùå D√âSACTIV√â PAR D√âFAUT
                    "method": "traditional",  # traditional, fibonacci, camarilla
                    "show_r3": True,
                    "show_r2": True,
                    "show_r1": True,
                    "show_pp": True,
                    "show_s1": True,
                    "show_s2": True,
                    "show_s3": True,
                },
            },
            # === STYLES DE TRADING ===
            "trading_styles": {
                "current_style": "day_trading",  # üéØ DAY TRADING PAR D√âFAUT
                "styles": {
                    "scalping": {
                        "timeframe": "1m",
                        "indicators": {
                            "ema": {"period": 8},
                            "rsi": {"period": 7, "overbought": 80, "oversold": 20},
                            "atr": {"period": 7, "multiplier": 1.5},
                        },
                    },
                    "day_trading": {
                        "timeframe": "15m",
                        "indicators": {
                            "sma": {"period": 20},
                            "ema": {"period": 12},
                            "rsi": {"period": 14, "overbought": 70, "oversold": 30},
                            "atr": {"period": 14, "multiplier": 2.0},
                        },
                    },
                    "swing_trading": {
                        "timeframe": "4h",
                        "indicators": {
                            "sma": {"period": 50},
                            "ema": {"period": 21},
                            "rsi": {"period": 21, "overbought": 65, "oversold": 35},
                            "atr": {"period": 21, "multiplier": 2.5},
                        },
                    },
                    "position_trading": {
                        "timeframe": "1d",
                        "indicators": {
                            "sma": {"period": 100},
                            "ema": {"period": 50},
                            "rsi": {"period": 30, "overbought": 60, "oversold": 40},
                            "atr": {"period": 30, "multiplier": 3.0},
                        },
                    },
                },
            },
        }

    def _load_config(self) -> Dict[str, Any]:
        """Charge la configuration depuis le fichier JSON"""
        try:
            if self.config_file.exists():
                with open(self.config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)

                # Merge avec config par d√©faut pour nouveaux param√®tres
                return self._merge_configs(self.default_config, config)
            else:
                # Cr√©er le fichier avec config par d√©faut
                self._save_config(self.default_config)
                return self.default_config.copy()

        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur loading config: {e}")
            return self.default_config.copy()

    def _merge_configs(self, default: Dict, loaded: Dict) -> Dict:
        """Fusionne la config charg√©e avec les valeurs par d√©faut"""
        result = default.copy()

        def deep_merge(base_dict, update_dict):
            for key, value in update_dict.items():
                if (
                    key in base_dict
                    and isinstance(base_dict[key], dict)
                    and isinstance(value, dict)
                ):
                    deep_merge(base_dict[key], value)
                else:
                    base_dict[key] = value

        deep_merge(result, loaded)
        return result

    def _save_config(self, config: Dict[str, Any]):
        """Sauvegarde la configuration dans le fichier JSON"""
        try:
            # Cr√©er le dossier si n√©cessaire
            self.config_file.parent.mkdir(parents=True, exist_ok=True)

            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)

        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur saving config: {e}")

    def get_indicator_config(self, category: str, indicator: str) -> Dict[str, Any]:
        """R√©cup√®re la configuration d'un indicateur sp√©cifique"""
        try:
            return self.config[category][indicator].copy()
        except KeyError:
            logger.info(f"‚ö†Ô∏è Config not found: {category}.{indicator}")
            return {}

    def update_indicator_config(
        self, category: str, indicator: str, key: str, value: Any
    ):
        """Met √† jour un param√®tre sp√©cifique d'un indicateur"""
        try:
            if category not in self.config:
                self.config[category] = {}
            if indicator not in self.config[category]:
                self.config[category][indicator] = {}

            self.config[category][indicator][key] = value
            self._save_config(self.config)

            logger.info(f"‚úÖ Config updated: {category}.{indicator}.{key} = {value}")

        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur updating config: {e}")

    def get_all_basic_indicators(self) -> Dict[str, Any]:
        """R√©cup√®re tous les indicateurs de base"""
        return self.config.get("basic_indicators", {})

    def get_all_advanced_indicators(self) -> Dict[str, Any]:
        """R√©cup√®re tous les indicateurs avanc√©s"""
        return self.config.get("advanced_indicators", {})

    def get_current_trading_style(self) -> str:
        """R√©cup√®re le style de trading actuel"""
        return self.config.get("trading_styles", {}).get("current_style", "day_trading")

    def apply_trading_style(self, style_name: str):
        """Applique un style de trading (met √† jour tous les indicateurs)"""
        try:
            styles = self.config.get("trading_styles", {}).get("styles", {})
            if style_name not in styles:
                logger.info(f"‚ö†Ô∏è Style non trouv√©: {style_name}")
                return

            style_config = styles[style_name]

            # Mettre √† jour le style actuel
            self.config["trading_styles"]["current_style"] = style_name

            # Appliquer les param√®tres du style aux indicateurs
            for indicator, params in style_config.get("indicators", {}).items():
                if indicator in self.config["basic_indicators"]:
                    for key, value in params.items():
                        self.config["basic_indicators"][indicator][key] = value

            self._save_config(self.config)
            logger.info(f"‚úÖ Style appliqu√©: {style_name}")

        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur applying style: {e}")

    def reset_to_defaults(self):
        """Remet √† z√©ro tous les param√®tres aux valeurs par d√©faut"""
        self.config = self.default_config.copy()
        self._save_config(self.config)
        logger.info("‚úÖ Configuration reset to defaults")

    def export_config(self, filepath: str):
        """Exporte la configuration actuelle vers un fichier"""
        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            logger.info(f"‚úÖ Configuration exported to: {filepath}")
        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur exporting config: {e}")

    def import_config(self, filepath: str):
        """Importe une configuration depuis un fichier"""
        try:
            with open(filepath, "r", encoding="utf-8") as f:
                imported_config = json.load(f)

            self.config = self._merge_configs(self.default_config, imported_config)
            self._save_config(self.config)
            logger.info(f"‚úÖ Configuration imported from: {filepath}")

        except Exception as e:
            logger.info(f"‚ö†Ô∏è Erreur importing config: {e}")


# Instance globale
parameters_manager = ParametersManager()
