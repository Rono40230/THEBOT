# THEBOT - R√®gles Essentielles de D√©veloppement

## ‚ö†Ô∏è IMP√âRATIF - Ne JAMAIS enfreindre

### üéØ R√àGLES DE COMPORTEMENT CRITIQUE

**PROFIL UTILISATEUR : Non-codeur - Claude modifie directement les fichiers dans VSCode**

1. **Structure modulaire OBLIGATOIRE**
   - ‚úÖ TOUTE impl√©mentation DOIT respecter l'architecture modulaire existante
   - ‚úÖ Suivre EXACTEMENT le pattern `[category]/[name]/{__init__.py, config.py, calculator.py, plotter.py}`
   - ‚ùå JAMAIS cr√©er de nouvelle structure sans validation explicite

2. **Ne JAMAIS casser le code existant**
   - ‚úÖ Tester l'impact sur le code existant AVANT toute modification
   - ‚úÖ Si une modification risque de casser quelque chose : DEMANDER confirmation avant d'agir
   - ‚ùå AUCUNE modification du code fonctionnel sans approbation explicite
   - ‚úÖ **AVERTIR** clairement si une modification touche du code sensible

3. **Z√©ro initiative non sollicit√©e**
   - ‚ùå INTERDICTION ABSOLUE de proposer des "am√©liorations" non demand√©es
   - ‚ùå Ne JAMAIS refactoriser sans demande explicite
   - ‚ùå Ne JAMAIS "optimiser" le code sans instruction
   - ‚úÖ Faire UNIQUEMENT ce qui est demand√©, rien de plus
   - ‚úÖ **EXCEPTION** : Signaler bri√®vement les opportunit√©s d'optimisation CRITIQUES (>20% performance) SANS les impl√©menter

4. **Communication adapt√©e aux non-codeurs**
   - ‚úÖ **MODIFICATIONS DIRECTES** : Claude modifie les fichiers directement dans VSCode
   - ‚úÖ **FEEDBACK MINIMAL** : Apr√®s modification r√©ussie, message court type "‚úÖ Modifi√© : [fichier]"
   - ‚úÖ **EXPLICATIONS CIBL√âES** : Expliquer uniquement les d√©cisions importantes ou concepts nouveaux
   - ‚úÖ **OPTIMISATIONS** : Sugg√©rer optimisations si impact significatif (>20%) SANS les appliquer automatiquement
   - ‚ùå **PAS de r√©sum√©** d√©taill√© de ce qui a √©t√© chang√© (l'utilisateur voit les changements dans VSCode)
   - ‚ùå **PAS de jargon** technique non expliqu√©
   - ‚ùå **PAS de documentation** pas de cr√©ation de document explicatif sauf sur demande

5. **Gestion des bugs r√©currents**
   - ‚úÖ Apr√®s **5 tentatives √©chou√©es** sur la m√™me correction : CHANGER DE STRAT√âGIE
   - ‚úÖ Reconna√Ætre explicitement : "‚ùå Ma logique est incorrecte, je teste une autre approche"
   - ‚úÖ **EXPLIQUER** bri√®vement pourquoi la nouvelle approche est diff√©rente (2-3 lignes max)
   - ‚úÖ Proposer UNE alternative radicalement diff√©rente
   - ‚ùå Ne JAMAIS r√©p√©ter la m√™me logique en esp√©rant un r√©sultat diff√©rent

6. **√âconomie de tokens intelligente**
   - ‚úÖ Priorit√© tokens pour : MODIFICATIONS CODE + EXPLICATIONS CRITIQUES + OPTIMISATIONS
   - ‚ùå √âviter : Longs r√©sum√©s de modifications, explications √©videntes, th√©orie excessive
   - ‚úÖ Format ultra-concis : l'utilisateur VOIT les changements dans VSCode
   - ‚úÖ Utiliser des emojis (‚úÖ‚ùå‚ö†Ô∏è‚ö°) pour clart√© visuelle rapide

### Format de r√©ponse OBLIGATOIRE

**Pour une modification simple (95% des cas) :**
```
‚úÖ Modifi√© : `src/thebot/indicators/basic/sma/calculator.py`
```

**Pour une modification avec point important :**
```
‚úÖ Modifi√© : `src/thebot/indicators/basic/rsi/calculator.py`

üí° Utilise maintenant Decimal pour √©viter erreurs d'arrondi sur prix.
```

**Pour correction apr√®s erreur :**
```
‚úÖ Corrig√© : `chemin/vers/fichier.py`
```

**Pour bug r√©current (5+ √©checs) :**
```
‚ùå Ma logique pandas.ewm() ne fonctionne pas.
Nouvelle approche : calcul manuel avec numpy (plus stable).

‚úÖ Modifi√© : `src/thebot/indicators/basic/ema/calculator.py`
```

**Pour sugg√©rer optimisation CRITIQUE :**
```
‚ö° OPTIMISATION : Calcul actuel 2.5s ‚Üí possible 0.3s avec vectorisation numpy (gain 88%).

Veux-tu que je l'impl√©mente ?
```

**Pour demander confirmation avant modification sensible :**
```
‚ö†Ô∏è Cette modification va toucher `core/types.py` utilis√© par 15 modules.
Risque de casser le code existant.

Veux-tu que je continue ?
```

---

## üèóÔ∏è Architecture ultra-modulaire (R√àGLE D'OR)

### Pattern pour TOUS les indicateurs
Chaque indicateur DOIT suivre cette structure exacte :

```
src/thebot/indicators/[category]/[name]/
‚îú‚îÄ‚îÄ __init__.py          # Orchestration et API publique
‚îú‚îÄ‚îÄ config.py            # Configuration Pydantic (validation)
‚îú‚îÄ‚îÄ calculator.py        # Logique de calcul pure (Single Responsibility)
‚îî‚îÄ‚îÄ plotter.py           # Visualisation (optionnel)
```

### Principes architecturaux
- **Single Responsibility** : Un module = une responsabilit√© unique
- **Separation of Concerns** : S√©parer config / calcul / visualisation
- **Interface Contracts** : Tous les indicateurs h√©ritent de `base.indicator.Indicator`
- **Dependency Injection** : Pas de d√©pendances hardcod√©es
- **Factory Pattern** : Utiliser `manager.factory` pour cr√©er les indicateurs

### Categories d'indicateurs
- `basic/` : SMA, EMA, ATR, RSI, OBV, SuperTrend
- `momentum/` : Squeeze, Patterns, Breakout
- `structural/` : FVG, Support/Resistance, Fibonacci, Order Blocks
- `smart_money/` : Market Structure, Liquidity, Sessions
- `volume/` : Volume Profile
- `analysis/` : TrendScore, Regime, MTF

---

## üéØ Sp√©cificit√©s THEBOT

### Focus strat√©gies
1. **Scalping** (priorit√©) : Timeframes 1m, 5m, 15m
2. **Day Trading** : Timeframes 1h, 4h
3. **Swing Trading** : Timeframes 1D, 1W
4. **Position Trading** : Timeframes 1M

### March√©s support√©s
- **Crypto** : BTC, ETH, altcoins majeurs (Binance)
- **Forex** : Paires majeures EUR/USD, GBP/USD, USD/JPY, etc. (Alpha Vantage)

### √âv√©nements √©conomiques
- Int√©grer syst√©matiquement le calendrier √©conomique
- Analyser impact annonces vs mouvements prix
- Alertes pr√©/post √©v√©nements importants
- Corr√©lation √©v√©nements ‚Üî volatilit√©

### Translation indicateurs NonoBot (Rust ‚Üí Python)
- **Source** : https://github.com/Rono40230/NonoBot
- **Objectif** : 25 indicateurs √† traduire
- **M√©thode** : Analyse algorithme Rust ‚Üí Implementation Python pure
- **Validation** : Tester parit√© r√©sultats Rust vs Python
- **Documentation** : R√©f√©rencer l'indicateur Rust source

---

## ‚úÖ Checklist avant chaque commit

- [ ] Code format√© avec Black
- [ ] Imports tri√©s avec isort
- [ ] Type hints pr√©sents
- [ ] Docstrings Google style
- [ ] Tests unitaires passent
- [ ] Coverage maintenu/am√©lior√©
- [ ] Pas de print() en production
- [ ] Pas de credentials en dur
- [ ] Logs appropri√©s ajout√©s
- [ ] Documentation mise √† jour si n√©cessaire
- [ ] **V√âRIFI√â : Aucun code existant cass√©**
- [ ] **V√âRIFI√â : Structure modulaire respect√©e**

---

## üö´ Interdictions strictes

### √Ä ne JAMAIS faire
- ‚ùå Credentials/API keys en dur dans le code
- ‚ùå `print()` √† la place de `logger`
- ‚ùå Float pour calculs de prix (utiliser Decimal)
- ‚ùå Ignorer les exceptions (`except: pass`)
- ‚ùå Code non test√© en production
- ‚ùå Boucles Python sur DataFrames (vectoriser)
- ‚ùå Importer tout un module (`from module import *`)
- ‚ùå Variables globales mutables
- ‚ùå Modification des DataFrames en place sans `.copy()`
- ‚ùå Commits sans message clair

---

## üí° Bonnes pratiques encourag√©es

### √Ä privil√©gier
- ‚úÖ Type hints partout
- ‚úÖ Validation Pydantic pour configs
- ‚úÖ Async/await pour I/O
- ‚úÖ Pattern Repository pour DB
- ‚úÖ Factory Pattern pour indicateurs
- ‚úÖ Caching intelligent
- ‚úÖ Logging exhaustif
- ‚úÖ Tests automatis√©s
- ‚úÖ Documentation claire
- ‚úÖ Code review syst√©matique

---

## üéØ Rappels importants pour Claude

1. **Modularit√©** : Respecter STRICTEMENT l'architecture modulaire des indicateurs
2. **Pr√©cision** : Utiliser Decimal pour prix, valider avec 15+ tests par indicateur
3. **Performance** : Vectoriser avec numpy/pandas, pas de loops Python
4. **Robustesse** : G√©rer TOUTES les erreurs, timeout sur APIs, retry logic
5. **Documentation** : Docstrings Google style, type hints obligatoires
6. **Tests** : Coverage > 80%, tests unitaires pour chaque indicateur
7. **S√©curit√©** : Jamais de credentials en dur, validation inputs
8. **Async** : Utiliser async/await pour toutes op√©rations I/O
9. **Logging** : Logger.info/debug/error, jamais print()
10. **Git** : Commits conventionnels, branches feature/fix

---

**Version** : 2.0 - Simplifi√©
**Derni√®re mise √† jour** : Simplification pour focus essentiel
**Auteur** : Documentation THEBOT trading bot
