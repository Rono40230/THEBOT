name: CI/CD Pipeline - THEBOT

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Tests unitaires et qualit√© du code
  test:
    name: Unit Tests & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock black flake8 mypy
    
    - name: Run code quality checks
      run: |
        # Formatage avec Black
        black --check --diff .
        
        # Linting avec Flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
        # Type checking avec MyPy (optionnel pour l'instant)
        mypy dash_modules/core/ --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=dash_modules --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=dash_modules --cov-report=xml --cov-append --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Tests de s√©curit√©
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety vulnerability check
      run: |
        safety check --output json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Tests de performance
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/integration/test_phase4_integration.py::TestPhase4Performance -v --benchmark-only --benchmark-json=perf-results.json
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: perf-results.json

  # Build et package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # D√©ploiement en staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, performance, build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Deploy to staging
      run: |
        echo "üöÄ D√©ploiement en staging..."
        # Ici vous ajouteriez vos commandes de d√©ploiement
        # Par exemple: d√©ploiement sur un serveur, upload sur PyPI test, etc.
        echo "‚úÖ D√©ploiement staging simul√©"

  # D√©ploiement en production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, performance, build]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Deploy to production
      run: |
        echo "üéØ D√©ploiement en production..."
        # Ici vous ajouteriez vos commandes de d√©ploiement production
        # Par exemple: d√©ploiement sur les serveurs de prod, upload sur PyPI, etc.
        echo "‚úÖ D√©ploiement production simul√©"

  # Notification de fin
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, performance, build]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.performance.result == 'success' && needs.build.result == 'success'
      run: |
        echo "üéâ Pipeline CI/CD r√©ussi !"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå √âchec du pipeline CI/CD"
        # Ici vous pourriez ajouter des notifications Slack, Discord, email, etc.
