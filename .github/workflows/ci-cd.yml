name: THEBOT CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-html

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=dash_modules --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --cov=dash_modules --cov-report=xml --cov-append --cov-report=term-missing

    - name: Generate coverage report
      run: |
        coverage combine
        coverage report --show-missing
        coverage html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run performance tests
      run: |
        python -m pytest tests/integration/test_performance.py -v --durations=10

    - name: Run load tests
      run: |
        python -m pytest tests/integration/test_load_scenarios.py -v --durations=10

    - name: Generate test report
      run: |
        python -m pytest tests/ --html=reports/test-report.html --self-contained-html

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/
      if: always()

  quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint mypy bandit safety

    - name: Check code formatting with black
      run: black --check --diff .

    - name: Check import sorting with isort
      run: isort --check-only --diff .

    - name: Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Lint with pylint
      run: pylint dash_modules/ tests/ --output-format=parseable

    - name: Type check with mypy
      run: mypy dash_modules/ --ignore-missing-imports

    - name: Security check with bandit
      run: bandit -r dash_modules/ -f json -o reports/security-report.json

    - name: Check dependencies security
      run: safety check

  deploy:
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Build application
      run: |
        # Créer un package ou artefact de déploiement
        python setup.py sdist bdist_wheel

    - name: Deploy to staging
      run: |
        echo "Déploiement en staging - à implémenter"
        # Ici on pourrait déployer sur un serveur de staging

    - name: Run smoke tests on staging
      run: |
        echo "Tests de fumée sur staging - à implémenter"
        # Tests rapides pour vérifier que le déploiement fonctionne

  docker:
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/thebot:latest
          ${{ secrets.DOCKER_USERNAME }}/thebot:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install docs dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html